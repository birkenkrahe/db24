#+TITLE: Notebook - Database Theory and Applications
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 330, Lyon College, Spring 2024
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
* DONE Week 1 - Overview & introduction to RDBMS
#+attr_html: :width 400px
[[../img/cover.png]]

- [X] See [[https://lyon.instructure.com/courses/2254/assignments/syllabus][Syllabus]] (see also [[https://lyon.instructure.com/courses/2254/pages/course-links][course links]]) in Canvas.
- [X] Whiteboard/screenshots on GDrive
- [X] All other materials [[https://github.com/birkenkrahe/db24][in GitHub]] (Git? Hello world exercise?)
- [X] Your entry into a "Data Engineering" [[https://app.datacamp.com/learn/career-tracks][career track]]!
- [X] Today: Emacs tutorial (because I'm tired of lecturing)

* DONE Week 2 - Introduction to SQL - SQLite first steps
#+ATTR_HTML: :WIDTH 400px:
[[../img/sqlite_install.png]]

- [X] DataCamp review: Introduction to SQL - Q&A and practice
- [X] Starting with SQLite in Emacs and checking out replit.com

- [X] (Bonus) assignment: Emacs tutorial (upload screenshot to Canvas)
- [X] PC install Emacs + SQLite3! I'll help you after class (see [[https://chat.google.com/room/AAAAEZSJ81g/gCgKDYojP8k/gCgKDYojP8k?cls=10][chat]])

- [ ] Lecture: history of databases ([[https://youtu.be/KG-mqHoXOXY?si=RgQAO5caWyRfxWwh][video]] & Beaulieu, 2021)
- [ ] Let's talk about your term projects (Thu)

** Announcement: Journal club!

Data science enthusiasts: there will be a "journal club" on Wednesday
12-12:45 pm in Derby room 209. We'll put the papers in a GDrive.

For the first journal club on Januar 31, I'd like to submit my last
non-technical paper, "The role of AI coding assistants: revisiting the
need for literate programming in computer and data science education."
([[https://drive.google.com/file/d/1OonJ1pesK2iRP3JDf4MoBRgg4NKk91yU/view?usp=sharing][Link]]) This paper will be presented at INTED'24, the 18th annual
International Technology, Education and Development Conference in
Valencia (Spain), March 4-6.

You can get some background on this topic from the wall poster in
front of my office, about the paper that I wrote before this one.
#+ATTR_HTML: :WIDTH 400px:
[[../img/MDPI_2023_BIRKENKRAHE_poster.pptx.png]]

*Caveat:* in a journal club, you discuss other people's papers and not
your own - I will try to simulate that by discussing my paper as if
someone else had written it, and also using AI to deliver a critique.

** Announcement: UAMS College of Public Health student session

Monday, 29 January 12-12:45 PM via Zoom: http://tinyurl.com/UAMSCPUH
Passcode: 941969
#+ATTR_HTML: :WIDTH 400px:
[[../img/UAMS_student_session.png]]

** DataCamp review: Relational databases
*** Corrections (nit-picking)

- SQL is NOT an acronym for anything, not even "Structured Query
  Language" (that's just a mnemonic): when Codd proposed his
  relational model, he also proposed a language called DSL/Alpha to
  manipulate the data. A group at IBM built a simplified version of
  that language and called it SQUARE, which eventually led to a
  language called SEQUEL, which was finally shortened to SQL
  (Beaulieu, 2021:23).

- The number of fields (columns, features) is not set when the
  database is created but when the table containing the columns is
  created.

*** Review questions and preview:

1. What's special about the fields ~card_num~ and ~id~?
   #+ATTR_HTML: :WIDTH 400px:
   [[../img/librarydb.png]]

2. What kind of questions can you answer using these data? Distinguish
   between questions that do (do not) require different tables.
   #+begin_notes
   Doesn't require table relationships:
   - What's James' library card number? [patrons]
   - Who wrote "Where the Wild Things Are"? [books]
   - When did the patron with ~card_num~ 54378 check out book ~638~? [checkouts]

   Does require table relationships:
   - Is Sendak's "Where the Wild Things Are" currently checked out?
     [books, checkouts]
   - Is Jasmin's account overdue? [patrons, checkouts]
   - Did James ever check out Tara Westover's "Educated"?
     [patrons,books,checkouts]
   #+end_notes

3. Database tables are not spreadsheets (though they look like them). What's
   the difference?
   #+begin_notes
   | Feature        | Spreadsheets                                                                                  | Relational Databases                                                                                 |
   |----------------+-----------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------|
   | Data Storage   | Cell-based, typically in rows and columns. Ideal for smaller, simple datasets.                | Structured in tables with rows and columns. Designed for large and complex data sets.                |
   | Scalability    | Limited scalability. Performance issues with very large datasets.                             | Highly scalable. Can handle large amounts of data efficiently.                                       |
   | Complexity     | User-friendly for basic operations. Limited functionality for complex data manipulation.      | Requires understanding of database languages (like SQL). More capable in handling complex queries.   |
   | Data Integrity | Prone to human error. No built-in mechanisms for enforcing data integrity.                    | Strong data integrity with constraints, transactions, and rollback capabilities.                     |
   | Data Analysis  | Basic analysis and visualization tools. PivotTables for data summarization.                   | Advanced querying, indexing, and data manipulation capabilities. Better suited for complex analyses. |
   | Collaboration  | Simpler for single-user. Collaboration possible but prone to conflicts and versioning issues. | Designed for multi-user environments. Concurrency control and user access management.                |
   | Examples       | Microsoft Excel, Google Sheets                                                                | MySQL, PostgreSQL, Oracle, SQL Server                                                                |
   #+end_notes

4. Describe the relationship of databases, tables and data.
   #+begin_notes
   - Data are stored in tables. They come in two types: numeric or
     character. Numeric data can be floating point or
     integer. (PostgreSQL: ~INT~, ~VARCHAR~, ~NUMERIC~. SQLite: ~INT~, ~REAL~,
     ~TEXT~)
   - Tables consist of rows (observations) and columns (fields,
     features, or properties). Every table row must have a unique
     identifier (~PRIMARY KEY~).
   - Databases contain tables. They also contain meta data - e.g. a
     dictionary with access permissions, and transactional
     information.
   - Database Management Systems (DBMS) is software to manage
     databases.
   - Database systems = DBMS + databases + IT infrastructure
   #+end_notes

5. What does =VARCHAR= mean?
   #+begin_notes
   A variable character data type whose exact size in database memory
   is decided when the data are put into the database.
   #+end_notes

6. Databases can only be accessed securely by one person at a time.
   #+begin_notes
   FALSE. Modern databases allow multi-user access at all times.
   #+end_notes

7. How popular is SQL exactly? How would you find out?
   #+begin_notes
   Compare [[https://www.tiobe.com/tiobe-index/][TIOBE]] (01/24: #9 for search) and [[https://spectrum.ieee.org/the-top-programming-languages-2023][IEEE]] 08/23: #1 for jobs).
   #+end_notes

8. What are sources of data redundancy in relational databases?
   #+begin_notes
   - The same column or feature occurs in different
     tables. E.g. ~book_id~ in the ~books~ and in the ~check_out~ table.
   - A field value contains different fields, e.g. ~address~ with the
     value ~1014 E Main St Batesville AR~, or ~name~ as ~Marcus
     Birkenkrahe~~. Antidote = "normalization".
   #+end_notes

9. What's a database "schema"?
   #+begin_notes
   The blueprint of a database - a record of its structure. In SQL,
   this takes the form of a list of all data table creation commands,
   e.g. ~CREATE TABLE books (id INT PRIMARY KEY, title TEXT, author
   TEXT, genre TEXT);~
   #+end_notes

10. Are tables limited in size? How can you find these things out?
    #+begin_notes
    Rows/records are only limited by available memory (to old the
    table information). Fields/Columns are limited by the RDBM, e.g.
    SQL Server is limited to 1024 columns per table at most.

    RDBM are exquisitely documented. Example: [[https://dev.mysql.com/doc/refman/8.0/en/][MySQL Reference Manual]].
    #+end_notes

** Fundamental concepts of database management (PDBM, 2018)

This is a great book - not something you'll read cover-to-cover but a
useful reference that brings you all the modern stuff right up
to 2018. I am not aware of any more complete book written after
that. Also, Cambridge U Press is a great (scientific) publisher.
- Slides [[https://docs.google.com/presentation/d/1URes41gtKK6MFUz8BHUZ3fQ1iUggpajR/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][chapter 1]]
- Videos ([[https://www.youtube.com/playlist?list=PLdQddgMBv5zHcEN9RrhADq3CBColhY2hl][playlist]])
- Source: Principles of DB Management ([[https://www.pdbmbook.com/][pdbmbook.com]]) - CUP 2018

** [[file:1_history.org][History of databases]] (and their types)

- Watch on [[https://youtu.be/KG-mqHoXOXY][YouTube]] (5:39 min) - Computer History Museum, 2019

- Which of these guys has got nothing to do with databases?
  #+attr_html: :width 400px
  #+caption: Which of these founders has nothing to do with databases?
  [[../img/founders.png]]

** First steps with the SQLite shell (Tue 23-Jan)

Open the SQLite shell to a transient database:
1) create a table ~books~ with ~CREATE~
2) check database ~.schema~
3) check tables with ~.tables~
4) insert a record with ~INSERT~
5) print table with ~SELECT~
6) change display options with ~.header~ and ~.mode~
7) export table data to SQL file with ~.output books.sql~ and ~.dump~
8) quit with ~.quit~

#+begin_example sqlite
   CREATE TABLE books (id INT, author TEXT, title TEXT);
   .schema
   .tables
   INSERT INTO books (id,author,title) VALUES (1,'Tolstoy','War and Peace');
   SELECT * FROM books;
   .header ON
   .mode column
   .output books.sql
   .dump
   .output stdout
   .quit
#+end_example

To start SQLite with a persistent database, enter ~sqlite3 test.db~, and
then all data will be written to ~test.db~ (in a binary format), while
~.sql~ files are text and human-readable.

Open the SQLite shell to a transient database:
1) import the ~.sql~ file you wrote in the last session
2) check that import went well with ~.tables~ and display the table.
3) quit the shell.

#+begin_example sqlite
  .read books.sql
  .tables
  SELECT * FROM books;
  .quit
#+end_example

Now, let's do it in Emacs! Download the practice file
~tinyurl.com/firstSQLite~ and open it in Emacs. Instructions are in
there. Upload completed file to Canvas by Friday night.

* DONE Week 3 - Relational databases and SQLite queries
#+ATTR_HTML: :WIDTH 400px:
[[../img/sql_queries.png]]

- [X] *Test 1*: General questions on relational databases and SQLite
  Remember that the tests are "open book" and take your time (45min)!
- [X] *Practice*: querying with SQLite
- [ ] *Lecture*: Types of databases and ACID
- [ ] *Discussion*: Project ideas
- [ ] *Review*: DataCamp lesson "Querying" and "SQL flavors"
- [ ] *Lecture*: The SQLite database management system
- [ ] *Lecture*: SQL querying

** Review of the review of querying in SQLite

1. Which SQL flavors do you already know?
   #+begin_notes
   PostgreSQL, T-SQL (Microsoft SQL server), MySQL (Oracle), SQLite
   #+end_notes
2. How can you find out how many records a table has (in SQLite)?
   #+begin_example sqlite
   SELECT COUNT(id) FROM table; -- What about the argument?
   #+end_example
3. Why does ~count~ not need an argument if I only want to know the
   number of rows?
   #+begin_notes
   Because all columns have the same length in a rectangular table.
   #+end_notes
3. What's the effect of =DISTINCT= in the following statement:
   #+begin_example sqlite
   SELECT DISTINCT col1, col2 FROM table;
   #+end_example
   #+begin_notes
   1) starting at the first row, go through all records/rows
   2) only select records with unique values of ~col1~
   3) display these records alongside the corresponding ~col2~ values in
      that row.
   #+end_notes
4. How can I restrict my query output to 100 lines starting at line 10?
   #+begin_example sqlite
   SELECT col FROM table LIMIT 10,100; -- offset 10, print limit 100
   #+end_example
5. What do you need to do to continue the practice file right where
   you left off?
   #+begin_notes
   1. delete ~books.sqlite~ (the database)
   2. run all code blocks with ~M-x org-babel-execute-buffer~
   #+end_notes
6. How can you print a complete practice file? E.g. to study for a test?
   #+begin_notes
   1. ~C-c C-e~ to enter the Org-mode dispatcher.
   2. Enter ~h~ ~o~ to open rendered file (HTML) in browser.
   3. Print browser as PDF.
   #+end_notes

** DataCamp review "Querying"

- Large datasets for databases (how large?)
  #+begin_notes
  Excel Data Limits:
  - Maximum rows: 1,048,576
  - Maximum columns: 16,384 (Column XFD)
  - Maximum cell limit: 17,179,869,184 cells
  - For 8 byte per cell: max. 137 GB.

  Google Sheets Data Limits:
  - Maximum rows: 10,000,000
  - Maximum columns: 18,278 (Column ZZZ)
  - Maximum cells: 5 million cells across the entire spreadsheet,
    including all sheets.
  - For 8 byte per cell: max. 40 MB.
  #+end_notes

- Keywords: =SELECT=, =FROM=, =DISTINCT=, =AS=, =VIEW=.

- How do queries change the database?
  #+begin_notes
  Queries create temporary views that do not change the
  database. Unless you define views, which become (permanent) virtual
  tables but they are not stored as separate tables.
  #+end_notes

- Does the order of fields in a ~SELECT~ statement matter?
  #+begin_notes
  The actual order of the stored table is irrelevant to the query,
  however, not to the display.
  #+end_notes

- Data scenarios:
  1) SQL: Large amounts of data about many different but related areas
     of a business are housed in a relational database.
  2) Spreadsheet: All data needed to answer the business question is
     presented in a spreadsheet, and no complicated relationships
     exist between different data points.
  3) Open: The data needed to answer the business question doesn't
     exist yet.
     #+begin_notes
     1. Identify Data Requirements
        - Understand the Business Question: Clearly define the
          business question and understand what insights or answers
          are needed.
        - Determine Required Data: Identify what type of data is
          needed to answer the question.

     2. Data Collection and Generation
        - Design Data Collection Methods: Depending on the required
          data, this could involve setting up data capture on
          websites/apps, conducting surveys, or using IoT devices for
          real-time data collection.
        - Develop Data Infrastructure: Implement databases or data
          storage solutions.

     3. Data Integration
        - Integrate the new data with existing datasets if necessary,
          which might involve ETL (Extract-Transform-Load) processes.

     4. Data Processing and Management
        - Clean and Prepare Data: Data cleaning and preprocessing.
        - Data Governance: Implement data governance policies.

     5. Analysis and Modeling
        - Exploratory Data Analysis (EDA): Conduct initial analysis to
          discover patterns.
        - Statistical Modeling/Machine Learning: Apply appropriate
          methods or models for analysis.

     6. Visualization and Reporting
        - Use data visualization tools for creating reports and dashboards.

     7. Feedback Loop and Iteration
        - Assess if the data collected is sufficient or if additional
          data is needed.
        - Continuously refine data collection and analysis processes
          based on feedback.

     8. Technology and Tools
        - Utilize appropriate tools and technologies

     #+end_notes

     #+begin_src mermaid :results output :file ../img/dataengineering.png
          flowchart TD
          A(Identify Data Requirements) -->
          |Understand data needs| B(Data Collection and Generation) -->
          |Have data| C(Data Integration) -->
          |Have consistent data| D(Data Processing and Management) -->
          |Manage data consistently| E(Data Analysis and Modeling) -->
          |Understand data| F(Visualization and Reporting) -->
          |Use data| G(Feedback Loop and Iteration) -->
              |Adapt data tools| H(Technology and Tools)
     #+end_src

     #+RESULTS:
     [[file:../img/dataengineering.png]]


Let's practice!

- Books database: [[http://tinyurl.com/books-sql][tinyurl.com/books-sql]]

- Practice file: [[http://tinyurl.com/querying-practice][tinyurl.com/querying-practice]]

Procedure:
- Download (~M-x eww~)
- Write to file (~C-x C-w~)
- Kill download buffer (~C-x k~)
- Open file (~C-x C-f~)

* DONE Week 4 - Fundamentals of DB, projects, and Selecting Data
#+ATTR_HTML: :WIDTH 400px:
[[../img/databases.png]]

- [X] Review: video "Fundamental concepts of DB management"
- [ ] Lecture: Types of databases
- [ ] Discussion: Term projects (sprint review - week 6, 19 Feb)

Next week:
- [ ] Lab "Querying relational databases"
- [ ] Lectures "SQLite" and "SELECT"

** Database Project Ideas for Introductory SQL and SQLite Class

- All projects must include an interactive component!
- What type of data interest you?
- Where could you get these data from?
- What kind of queries interest you?

Your ideas:
1. Hosting a web page - with a db driven map of player coordinates
2. Internship or job interest: what are the top applications or questions,
   - Storing and using factory data
   - Sales data storage and use
   - Game data, player data on the web
3. Generous offer: analyse and use RDD2 data (Ryan)

There will be a Canvas assignment and a Google Drive for your proposal
and all other future materials.

*** Database theory and applications - concept projects
**** Project 1: database design
**** Project 2: database optimization
**** Project 3: differences of SQL dialects ('flavours')
**** Project 4: database normalization
**** Project 5: database security
**** Project 6: SQL injection
**** Project 7: NoSQL (Not Only SQL)
**** Project 7: database mathematics
**** Project 8: databases and Python / R / Java...
**** Project 9: Big Data
**** Project 10: Data warehouses / lake (business application)
**** Project 11: Databases in biology / sports / engineering
**** Project 12: Databases and web applications
**** Project 13: Databases on tiny devices
**** Project 14: Databases and space exploration (with personal contact)
**** Project 15: Databases and astronomy (solar eclipse)
*** Simple projects: small applications - build a database
**** Project 1: Personal Contact Book
- Create a database to store personal contacts with fields like
  name, phone number, email, and address.
**** Project 2: Library Management System
- Design a database to manage books in a library, including
  information like book titles, authors, and availability.
**** Project 3: Student Record System
- Develop a database to maintain student records, including student
  names, courses, grades, and enrollment dates.
**** Project 4: Inventory Management
- Build a database for managing inventory in a small store,
  tracking products, prices, quantities, and suppliers.
**** Project 5: Employee Attendance Tracker
- Create a system to track employee attendance, including check-in
  and check-out times, and total hours worked.
**** Project 6: Blogging Platform Database
- Design a database for a blogging platform, storing posts,
  authors, comments, and categories.
**** Project 7: Event Management System
- Develop a database to manage events, including event details,
  participants, schedules, and venues.
**** Project 8: Restaurant Reservation System
- Build a database for managing restaurant reservations, including
  customer details, table numbers, and reservation times.
**** Project 9: Movie Rental Service
- Create a database for a movie rental service, tracking movies,
  customers, rental dates, and return dates.
**** Project 10: Hospital Patient Records
- Design a database for a hospital to manage patient records,
  including patient history, treatments, and medications.
**** Project 11: Flight Booking System
- Develop a database for a flight booking system, including flight
  details, passenger information, and booking dates.
**** Project 12: Online Retail Store
- Build a database for an online retail store, tracking products,
  customers, orders, and shipping details.
**** Project 13: Hotel Booking System
- Create a database for a hotel booking system, including room
  details, customer information, and booking dates.
**** Project 14: Car Rental Service
- Design a database for a car rental service, tracking vehicles,
  customers, rental periods, and rates.
**** Project 15: Sports Team Management
- Develop a database to manage a sports team, including player
  information, game schedules, and scores.

*** Advanced Database Projects: large applications - build a big database
**** Project 1: E-commerce Analytics System
- Develop a database to analyze e-commerce activities, tracking
  user behavior, sales trends, and product performance.
**** Project 2: Real Estate Property Management
- Create a database for managing real estate listings, including
  property details, agent information, and transaction history.
**** Project 3: University Course Registration System
- Design a complex system to handle course registrations,
  prerequisites, student schedules, and instructor assignments.
**** Project 4: Public Transportation Network
- Build a database to manage a public transportation system,
  including routes, schedules, fares, and passenger data.
**** Project 5: Human Resources Management System
- Develop a comprehensive database for HR activities, including
  employee profiles, performance reviews, and payroll.
**** Project 6: Health Care Data Analysis
- Create a database for analyzing health care data, focusing on
  patient outcomes, treatment effectiveness, and medical research.
**** Project 7: Banking Transaction System
- Design a secure database for banking transactions, including
  account management, transfers, and fraud detection.
**** Project 8: Supply Chain Management
- Build a database to manage a supply chain, tracking inventory
  levels, supplier relationships, and logistics.
**** Project 9: Customer Relationship Management (CRM)
- Develop a CRM database, tracking customer interactions, sales
  opportunities, and marketing campaigns.
**** Project 10: Social Media Analytics
- Create a database to analyze social media data, focusing on user
  engagement, content popularity, and trend analysis.
**** Project 11: Environmental Data Tracking
- Design a database for tracking environmental data, such as
  pollution levels, weather patterns, and wildlife populations.
**** Project 12: Smart City Infrastructure Management
- Build a database to manage smart city infrastructure, including
  traffic systems, energy usage, and public services.
**** Project 13: Insurance Claim Processing System
- Develop a database for processing insurance claims, including
  policyholder information, claim details, and fraud detection.
**** Project 14: Airline Fleet Maintenance Scheduler
- Create a database for scheduling and tracking maintenance of an
  airline's fleet, including parts inventory and service records.
**** Project 15: Multimedia Content Management
- Design a database to manage multimedia content, including video,
  audio, images, and metadata for a digital media platform.
*** Infrastructure projects - explore database systems
**** Project 1: Using DataCamp workspace with SQL
**** Project 2: Using Google Colaboratory with SQL
**** Project 3: Setting up and understanding PostgreSQL
**** Project 4: Setting up and understanding MySQL
**** Project 5: Setting up and understanding Microsoft Access
**** Project 6: Setting up and understanding Docker (or other virtualizations)
**** Project 7: NoSQL database applications (MongoDB) (NoSQL db example)
**** Project 8: Setting up and understanding Kubernetes
**** Project 9: Database design tools
(MySQL workbench, pgModeler, DBeaver, Apache Cassandra, SQuirreL SQL)
**** Project 10: SQL modes in Emacs (requires Emacs Lisp)

** 11 Review questions for "Fundamentals of DBMS" ([[https://youtu.be/o36Z_OqC2ac?si=z9eobmcn7bfeS_lp][video]])

To review this content, [[https://youtu.be/o36Z_OqC2ac?si=pEkI_mlTZRe_NTH6][watch the video]] or [[https://docs.google.com/presentation/d/1Ln-EnXMmO3ZzjztTRZ5rzBPBsUo08uzN/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][look at the slides]].

1. Name two specific database applications (what data, what purpose)!
   #+begin_notes
   - Storage and retrieval of traditional numeric and alphanumeric
     data in an inventory application
   - Multimedia applications (e.g., YouTube, Spotify) to support
     streaming
   - Biometric applications (e.g., store fingerprints, retina scans)
   - Wearable applications (e.g., FitBit, Apple Watch) - store fitness
     data
   - Geographical Information Systems (GIS) applications (e.g., Google
     Maps) - to store and serve geographical data
   - Sensor applications (e.g., nuclear reactor, temperature/radiation
     data)
   - Big Data applications (e.g., Walmart) - stock, sales, customer data
   - Internet of Things (IoT) applications (e.g. smart fridge, smart
     house)
   #+end_notes
2. Define: database, database management system, database system.
   #+begin_notes
   - A *database* (DB) is a collection of related data items within a
     specific process (= start/end/events/decisions).
   - A *database management system* (DBMS) is a software package used to
     define, create, use and maintain a database.
   - A *database system* is the combination of DBMS and DB (includes
     infrastructure).
   #+end_notes
3. Explain the difference between the file vs. database approach to
   managing data.
   #+begin_notes
   | File                       | Database                 |
   |----------------------------+--------------------------|
   | Redundant data             | Data are managed         |
   | Inconsistent data          | Data are consistent      |
   | Strong app-data coupling   | Loose app-data coupling  |
   | Little concurrency control | Concurrency control      |
   | Hard to integrate in ops   | Easy to integrate in ops |
   #+ATTR_HTML: :WIDTH 400px:
   #+caption: Source: PDBM book (Lemahieu et al., 2018)
   [[../img/file_approach.png]]
   #+ATTR_HTML: :WIDTH 400px:
   #+caption: Source: PDBM book (Lemahieu et al., 2018)
   [[../img/db_approach.png]]
   #+ATTR_HTML: :WIDTH 400px:
   #+caption: Source: PDBM book (Lemahieu et al., 2018)
   [[../img/file_vs_db.png]]

   The last figure also illustrates the difference between an
   imperative and a declarative language like SQL.
   #+end_notes
4. What's a database instance?
   #+begin_notes
   An instance is an implementation of a database model or database
   schema. Once the architecture blueprint (the schema) is realized
   (e.g. when you can look at it in SQLite), you're looking at an
   instance. When you leave the SQLite console, the state is saved
   (unless you work in a transient database) and the instance is
   destroyed - only the model remains.
   #+end_notes
5. What's a *logical* data model?
   #+begin_notes
   A logical data model is a translation of the conceptual data model
   to a specific implementation environment. For example:
   - conceptual model: "A list of numbered names." (DB pseudocode)
     #+ATTR_HTML: :WIDTH 200px:
     [[../img/conceptual.png]]
   - logical (relational) model or schema in an SQLite environment:
     #+ATTR_HTML: :WIDTH 400px:
     [[../img/logical.png]]
   - A db model editor can create both views, e.g. [[https://editor.ponyorm.com/user/birkenkrahe/conceptual_db_model/designer][ponyorm.com]]
   - The three layer architecture shows the whole picture:
     #+ATTR_HTML: :WIDTH 400px:
     #+caption: Source: PDBM book (Lemahieu et al., 2018)
     [[../img/three_layer1.png]]
   #+end_notes
6. What's in the catalog of a DBMS?
   #+begin_notes
   The catalog (aka data dictionary) contains data definitions
   (metadata) including schema, views, and other model aspects
   (e.g. for transactions or storage), and user permissions and keeps
   them consistent with one another (i.e. it's not just a document but
   rather a system application - like an OS kernel).
   #+end_notes
7. What's the difference between DDL and DML? Can you give an example?
   #+begin_notes
   -  DDL (data definition language) is used to epxress the external,
     logical, and internal data models. Example: ~CREATE TABLE test
     (name TEXT, number INT);~ (which in SQLite you get with =.schema=)
   - DML (data manipulation language) is used to retrieve, insert,
     delete and modify data. Example: ~INSERT INTO test (name, number)
     VALUES ('Database','101');~
   - SQL is both a DDL and a DML (and a DQL and a DCL besides).
   #+end_notes
8. Name three advantages of database management (over not managing data):
   #+begin_notes
   1. Data Independence = applications are unaffected by
      physical/logical changes
   2. Database Modelling = conceptual / logical / internal
   3. *Managing Structured, Semi-Structured and Unstructured Data*
   4. Managing Data Redundancy = duplication of data
   5. Specifying Integrity Rules = semantical rules (e.g. date format)
   6. *Concurrency Control*
   7. Backup and Recovery Facilities = incremental or full backup
   8. Data Security = different users have different access permissions
   9. *Performance Utilities*
   10. Size advantage = virtually infinite storage capacity
   #+end_notes
9. Examples for structured, semi-structured and unstructured data?
   #+begin_notes
   - Structured data can be tested for duplication, contamination
     etc. For example: number, name, address, email of a person.
   - Unstructured data must be structured before it can be
     processed. For example: document that contains personal details.
   - Semi-structured data have an irregular or volatile structure. For
     example: a person's X feed, or resume documents in an HR
     database.
   #+end_notes
10. What is concurrency and how does a database control concurrency?
    #+begin_notes
    - Concurrency means parallel execution of database programs, or
      synchronous transactions: DBMS reads/writes simultaneously.
    - DBMS control concurrency if they have ACID (Atomicity,
      Consistency, Isolation, Durability) properties.
    #+end_notes
11. What are three DBMS KPIs?
    #+begin_notes
    KPIs or Key Performance Indicators measure DB performance:
    1) response time (DB request to termination)
    2) throughput rate (transactions performed per unit of time)
    3) space utilization (to store raw data and metadata)
    #+end_notes

** NEXT  Opportunity: working directly with a [social] entrepreneurship project!
#+ATTR_HTML: :WIDTH 400px:
[[../img/social.webp]]

If you're interested in making the world a better place not just in a
general, but in a specific way, starting right here in Batesville, and
earn extra credit, you can use your project in connection with the
"social entrepreneurship club (SEC). For databases, this is fairly
straightforward because all businesses and projects need data and
databases. To brainstorm ideas and see what is already cooking, get
together with Dr. Peter Staples and me, and/or join the Google Space
for SEC.

Dr. Staples will also offer a project management course this summer.

* DONE Week 5 - DBMS types - SQLite introduction
#+attr_html: :width 400px:
[[../img/study_hour.png]]

** Types of database management systems (Beaulieu, 2012)

See [[file:1_fundamental.org]], see also [[https://youtu.be/j09EQ-xlh88?si=sGAUS_XDOoKKNgRH][video on YouTube]] (techTFQ, 2020),
13 min (includes NoSQL and graph database examples). There is also a
whole chapter on "Legacy databases".

- Hierarchical
- Network
- Relational
- Concurrency Control
- ACID rules

** SQLite overview
#+attr_html: :width 400px:
[[../img/sqlite_intro.png]]

- SQLite architecture vs. RDBMS client/server architecture:
  1. No management system between database files and user apps
  2. Instead just one file directly connected to the user app

- SQLite is a declarative programming language. Its properties:
  1. DDL: creating and altering tables
     #+begin_example sqlite
     CREATE [temp] TABLE table_name (col_def [constraints]);
     ALTER TABLE table_name (RENAME TO new_name|ADD COLUMN col_def);
     #+end_example
     Data types available: =REAL=, =TEXT=, =BLOB= =NULL=
  2. Exporting data (SQLite <-> shell)
  3. Deleting data (DDL for tables + DML for table content)
  4. Importing data (SQLite <-> shell)
  5. Querying data (DQL)
  6. Console (~sqlite3~) control (DCL)

- You can use graphical development tools but SQLite favors the
  command line. It has a small set of flags and options:
  #+begin_src bash
    sqlite3 --help
  #+end_src
  #+begin_example sh
Usage: sqlite3 [OPTIONS] FILENAME [SQL]
FILENAME is the name of an SQLite database. A new database is created
if the file does not previously exist.
OPTIONS include:
   -A ARGS...           run ".archive ARGS" and exit
   -append              append the database to the end of the file
   -ascii               set output mode to 'ascii'
   -bail                stop after hitting an error
   -batch               force batch I/O
   -box                 set output mode to 'box'
   -column              set output mode to 'column'
   -cmd COMMAND         run "COMMAND" before reading stdin
   -csv                 set output mode to 'csv'
   -deserialize         open the database using sqlite3_deserialize()
   -echo                print commands before execution
   -init FILENAME       read/process named file
   -[no]header          turn headers on or off
   -help                show this message
   -html                set output mode to HTML
   -interactive         force interactive I/O
   -json                set output mode to 'json'
   -line                set output mode to 'line'
   -list                set output mode to 'list'
   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory
   -markdown            set output mode to 'markdown'
   -maxsize N           maximum size for a --deserialize database
   -memtrace            trace all memory allocations and deallocations
   -mmap N              default mmap size set to N
   -newline SEP         set output row separator. Default: '\n'
   -nofollow            refuse to open symbolic links to database files
   -nonce STRING        set the safe-mode escape nonce
   -nullvalue TEXT      set text string for NULL values. Default ''
   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory
   -quote               set output mode to 'quote'
   -readonly            open the database read-only
   -safe                enable safe-mode
   -separator SEP       set output column separator. Default: '|'
   -stats               print memory stats before each finalize
   -table               set output mode to 'table'
   -tabs                set output mode to 'tabs'
   -version             show SQLite version
   -vfs NAME            use NAME as the default VFS
   -zip                 open the file as a ZIP Archive
  #+end_example

- Pros and cons:
  | +                                  | -                                |
  |------------------------------------+----------------------------------|
  | Very lightweight < 600KB           | Limited concurrency (1 access)   |
  | user friendly - zero config        | no user management               |
  | self-contained - no dependencies   | security: no data access control |
  | highly portable - stored in 1 file | limited data types               |

** SQLite review questions:

1) You can name a few things that are great about SQLite.
2) You can name a couple of pros and a couple of cons.
3) SQLite favors the command line. True or false?
4) You can run SQLite inside the Emacs editor. True or false?
5) You know the basic architecture of an SQLite database system.
6) You know what kind of programming language SQLite is.
7) You know if hierarchical databases are still used or not.
8) You know what ACID means.
   #+begin_quote
   - *Atomicity* requires that a transaction should either be executed in
     its entirety or not all.

   - *Consistency* assures that a transaction brings the database from one
     consistent state to another.

   - *Isolation* ensures that the effect of concurrent transactions should
     be the same as if they would have been executed in isolation.

   - *Durability* ensures that the database changes made by a transaction
     declared successful can be made permanent under all circumstances.

   #+end_quote
9) You know if ACID is for RDBMS.

** Due next week: your project proposal ([[https://lyon.instructure.com/courses/2254/assignments/24826][Canvas]]/[[https://drive.google.com/drive/folders/1Ezbgo7x0tjbkf1lJ1eSSQPCpudIPZqcC?usp=sharing][GDrive]])
#+attr_html: :width 400px:
[[../img/cats.png]]

- Social entrepreneurship opportunity: join forces with the pre-vet
  club to solve the problem of feral cat infestation on campus.

- A solution has to be found that is friendly to the animals, includes
  working with local vets (spaying), the college and the animal
  shelter.

- This many actors, a yet undefined process and operations, and an
  unknown amount of "small" data cries out for a database solution!

- Who among you will be the saviour of cats!?


* Week 6 - Sprint Review - SQLite practice
#+attr_html: :width 400px:
[[../img/week_6.png]]

- [ ] DataCamp check-in: how do you keep ahead of schedule?
  #+attr_html: :width 400px:
  [[../img/canvas_calendar.png]]

  A few of you consistently miss deadlines - do you use the calendar?
  Do you get email reminders from DataCamp (I do)?

- [ ] Review: test results
- [ ] Feedback: project proposals first reactions
- [ ] Review: Debugging SQLite
- [ ] Practice: SQLite
- [ ] No class on Thursday - home assignment

* TODO Test results: Not too shabby for now (5')
#+attr_html: :width 400px:
[[../img/test_1.png]]
#participants = 14/14
#+attr_html: :width 400px:
[[../img/test_2.png]]
#participants = 11/14

What do you need to improve your test performance?

* TODO Project proposal feedback (5')





* TODO Debugging SQLite (15')

1) What's the difference between ~sqlite3 --help~ and ~.help~?
   #+begin_quote
   ~sqlite3 --help~ is a command line shell command to get help for
   the ~sqlite3~ command, while ~.help~ is an SQLite command that only
   works on the SQLite console and returns help for the console.
   #+end_quote
2) Does SQLite need an existing database before it can run?
   #+begin_quote
   No, SQLite does not need an existing database - both when started
   from the command line, and when run inside Org-mode, the database
   will be created. When started without a database, ~sqlite3~ is in
   "transient database" mode, i.e. all data are stored in-memory and
   deleted when the session ends.
   #+end_quote
3) You run an SQLite code block with the command ~.tables~ inside
   Emacs but no output is written to the Org-mode file. How could
   you explain that?
   #+begin_quote
   - You might use the ~:results silent~ code block header argument.
   - You might have redirected the =.output= away from =stdout=.
   - You might use a database that has no tables in it.
   #+end_quote
4) You want to work with ~foods.sqlite~ which contains a few
   tables. You start the SQLite session with ~sqlite3
   foods.sqlite. However, when you enter =.tables=, there don't seem
   to be any tables inside. The ~.output~ is set to =stdout=. What's
   going on?
   #+begin_quote
   You need to check with =.database= if you're using the right
   file. If you were in a directory that did not contain
   ~foods.sqlite~, it was not found but instead, an empty database
   was created.
   #+end_quote
5) You've started SQLite from the shell with the ~--header~ and
   ~--column~ flags. How can you check if this worked without using
   ~SELECT~?
   #+begin_quote
   With the =.show= SQLite console command, which contains the
   currently active =.header= and =.mode= settings.
   #+end_quote
6) =.header= is =OFF=, =.mode= is =column=. What's the difference between
   ~SELECT 1+1;~ and ~SELECT "1+1";~
   #+begin_src sqlite :db test.db :results output :header :column
     .header off
     SELECT 1+1; -- evaluate expression and print result
     SELECT "1+1"; -- print the string literal "1+1"
   #+end_src
7) You've dumped a database to a file ~db.sql~. You want to know if that
   worked without leaving the SQLite console. What can you do?
   #+begin_src sqlite :db test.db :results output :header :column 
     .shell ls
   #+end_src
8) How can I create comments in an SQLite file?
   #+begin_quote
   - With the SQL comment command =--=
   - However, these comments will not be saved, which is another
     reason why we use Emacs Org-mode (for documentation purposes).
   #+end_quote
9) I want to start over with a database ~test.db~ that contains one
   table called ~test~, and empty the database. What are my options?
   #+begin_quote
    1) I can remove the table with: ~DROP TABLE test;~
    2) I can remove the database with ~.shell rm~
   #+end_quote
10) What's the general command to create a table? Which parts of the
    command are optional, and which are mandatory? ([[https://www.sqlite.org/lang_createtable.html][see doc]])
    #+begin_example sqlite
    CREATE [temp|temporary] TABLE table_name (col_def [constraints]);
    #+end_example
11) In one code block, I successfully create a temporary table
    ~test~. But in the next code block, the =.tables= command comes up
    empty. What's the explanation?
    #+begin_quote
    SQLite sessions are not persistent between code blocks: when the
    code block is entered/exited, a session is
    started/ended. Temporary tables are not permanently written to the
    database, so they are only in transient memory.
    #+end_quote
    #+begin_src sqlite :db test.db :results output :header :column 
      .tables
      CREATE temp TABLE test (useless TEXT);
      .shell ls -l test.db
      .schema
    #+end_src
    #+begin_src sqlite :db test.db :results output :header :column 
      .tables
    #+end_src
12) SQL warns about syntax violations but otherwise debugging
    information is very sparse. Why is that not such a big problem for
    the performance of the language?
    #+begin_quote
    SQL (and also SQLite) is a declarative, not an imperative language
    (like Python or R): how exactly things are implemented behind the
    scenes is largely out of your hands (though you can influence it
    with your database design).
    #+end_quote
13) When filling in a web-based form, you must enter your email. Which
    constraint is used here?
    #+begin_example sqlite
     email TEXT NOT NULL
    #+end_example
14) You're trying to enrol in a course with a prerequisite
    'CSC245'. Which constraint applies in this case?
    #+begin_example sqlite
    prereq TEXT CHECK (prereq == 'CSC245')
    #+end_example
15) You're evaluating a course, and you're feeling lazy, so you only
    fill in the fields marked with an asterisk as "must enter". A few
    fields remain empty. One of them is the field "enrolled Y/N" where
    you must enter 1 or 0. Which constraints are relevant here?
    #+begin_example sqlite
    enrolled INTEGER DEFAULT 1 CHECK (enrolled in (0,1))
    #+end_example

* TODO SQLite practice (45')
#+attr_html: :width 400px:
[[../img/gitpic.png]]

Add ~<sqlite~ to ~org-structure-template-alist~
1. ~C-h v org-structure-template-alist~
2. At the bottom, click on =Customize=
3. At the bottom, click on =Ins=
4. Enter the =Key= ~sqlite~
5. Enter the =Template= ~src sqlite :db test.db :results output :headerx
   :column~ (end with a space)
6. At the top, click on =Apply and Save=
7. Test it in an Org-mode file by entering ~<sqlite TAB~
8. In the code block, run a =sqlite3= command, like ~.database~

See here for [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sqlite.html][more information]] on using Org-mode with SQLite.

*Objectives:*
- Explore the SQLite shell
- Creating a database (DDL)
- Creating a table (DDL)
- Inserting values into a table (DML)
- Querying a table (DQL)
- Formatting stdout (DCL)
- Changing table content (DML)
- Change table structure (DDL)
- Viewing the table index (DQL)
- Viewing the table schema (DQL)
- Viewing table views (DQL)
- Viewing the master table (DQL)
- Exporting data (DML)
- Deleting a table (DDL)
- Deleting a database (DDL)
- Importing data (DML)
- Writing CSV files (DML)
- Interfacing with the shell (DCL)

* TODO Home assignment for Thursday, 22 February

- Complete the Canvas home assignment in tinyurl/sqlite-practice-org.

- Save the file using M-x eww to sqlite_practice.org and complete it.

- Upload your completed Org-mode file to Canvas by 4 pm on Thu 22 Feb

- I will share my sample solution.

- If you're still NOT comfortable of using Emacs Org-mode with SQLite,
  let me know! Perhaps [[http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/][this article]] will help?

* Week 7 -
#+attr_html: :width 400px:
[[../img/week_7.png]]

* Week 8 -
* Week 9 -
* Week 10 -
* Week 11 -
* Week 12 -
* Week 13 -
* Week 14 -
* Week 15 -
* Week 16 -

* References

Lemahieu, Vanden Broucke, Baesens: Principles of Database Management:
The Practical Guide to Storing, Managing and Analyzing Big and
Small. Cambridge U Press 2018.

Beaulieu: Learning SQL (2e). O'Reilly 2021.


