#+STARTUP: hideblocks overview indent :
#+OPTIONS: toc:nil num:nil ^:nil:
#+PROPERTY: header-args:sqlite :results output
* README

- Open [[http://tinyurl.com/select-org][tinyurl.com/select-org]] to code along

- Download the foods database as an SQL file from [[http://tinyurl.com/foods-sql][tinyurl.com/foods-sql]]

- Import the ~foods~ database from the commandline:
  #+begin_example bash

  #+end_example  

- Or import the database in a code block:
  #+begin_src sqlite :db foods.db :results output :header :column 

  #+end_src

- If we don't finish, you'll get the updated file at the start

Content:
- Overview of the =SELECT= pipeline
- Projection and restriction/filtering
- Anatomy of the =WHERE= clause
- Values and data types
- Unary, binary, and ternary operators

* =SELECT= column restriction (projection)

- =SELECT= is the most complex command in SQL.

- =SELECT= projects columns into a new working table.

  #+begin_src sqlite :db ../data/foods.db :results output :header :column

  #+end_src

* =WHERE= row restriction (filtering)

- The =WHERE= clause is the most complex clause in =SELECT.=

- =SELECT= projects, and =WHERE= restricts the number of rows.
  
  #+begin_src sqlite :db ../data/foods.db :results output :header :column

  #+end_src

- The argument of =WHERE= is a logical /predicate/.

- A predicate is an /assertion/ about something:
  #+begin_quote
  "The dog is purple and has a toothy grin."
  #+end_quote

  Here, ~dog~ is the *subject*, and ~"color is purple"~ and ~"grin is toothy"~
  is the *predicate*.

- The logical *subject* in the =WHERE= clause is a row.

- The =WHERE= clause is the logical *predicate*.

- How would the sentence above be translated into SQL?
  #+begin_quote

  #+end_quote

- This statement would filter those rows that satisfy the logical
  proposition:
  #+begin_quote

  #+end_quote

* Values and data types

- /Values/ represent data in in the real world.

- Values are classified by their type (numeric, string, date etc.)

- Values can be expressed as one of:

  1) *literals* (unchangeable) - like ~1~, ~2~, ~3~, "~Batesville~" etc.
     #+begin_src sqlite :db ../data/foods.db :results output :header :column

     #+end_src

     #+begin_src sqlite :db ../data/foods.db :results output :column

     #+end_src

  2) *variables* (changeable) - e.g. column names like ~foods.name~
     #+begin_src sqlite :db ../data/foods.db :results output :header :column

     #+end_src

  3) *expressions* (reducible) - e.g. ~3 + 2/5~
     #+begin_src sqlite :db ../data/foods.db :results output :column

     #+end_src

  4) *function results* - e.g. ~COUNT(foods.name))~
     #+begin_src sqlite :db ../data/foods.db :results output :header :column

     #+end_src

* Operators

- An operator takes one or more values as input and produces a value as output.

- Unary/Binary/Ternary operators take 1/2/3 input values (operands).

- Operators can be /pipelined/ and strung together forming value expressions:
  #+begin_example
  x = count(episodes.name)
  y = count(foods.name)
  z = y/x * 11
  #+end_example

- In ~foods~, this could look like this:
  #+begin_src sqlite :db ../data/foods.db :results output :column 

  #+end_src

- The result is correct apart from rounding errors (we need ~ROUND~):
  #+begin_src sqlite :db ../data/foods.db :results output :column 
  #+end_src

- Or you could create a temporary table or a Common Table Expression (CTE):
  #+begin_src sqlite :db ../data/foods.db :results output :column 
    CREATE TEMP TABLE x AS
       SELECT COUNT(name) FROM episodes; 
    CREATE TEMP TABLE y AS
       SELECT COUNT(name) FROM foods;
    .tables
  #+end_src
  
