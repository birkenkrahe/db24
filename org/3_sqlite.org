#+STARTUP: hideblocks overview indent :
#+OPTIONS: toc:nil num:nil ^:nil:
#+PROPERTY: header-args:sqlite :results output
* README

Open tinyurl.com/sqlite-codealong-org to code along.

- SQLite Overview / Pros and Cons
- Explore the SQLite shell
- Creating a database (DDL)
- Creating a table (DDL)
- Inserting values into a table (DML)
- Querying a table (DQL)
- Formatting stdout (DCL)
- Changing table content (DML)
- Change table structure (DDL)
- Viewing the table index (DQL)
- Viewing the table schema (DQL)
- Viewing table views (DQL)
- Viewing the master table (DQL)
- Exporting data (DML)
- Deleting a table (DDL)
- Deleting a database (DDL)
- Importing data (DML)
- Writing CSV files (DML)
- Interfacing with the shell (DCL)

* SQLite overview
#+attr_html: :width 400px:
[[../img/sqlite_intro.png]]

* Single-file approach (instead of client/server)

SQLite architecture vs. RDBMS client/server architecture:
1. No management system between database files and user apps
2. Instead just one file directly connected to the user app

* Declarative programming language

SQLite is a declarative programming language. Its properties:
1. DDL: creating and altering tables
   #+begin_example sqlite
   CREATE [temp] TABLE table_name (col_def [constraints]);
   ALTER TABLE table_name (RENAME TO new_name|ADD COLUMN col_def);
   #+end_example
   Data types available: =REAL=, =TEXT=, =BLOB= =NULL=
2. Exporting data (SQLite <-> shell)
3. Deleting data (DDL for tables + DML for table content)
4. Importing data (SQLite <-> shell)
5. Querying data (DQL)
6. Console (~sqlite3~) control (DCL)

- You can use graphical development tools but SQLite favors the
  command line. It has a small set of flags and options:
  #+begin_src bash
    sqlite3 --help
  #+end_src

  #+RESULTS:

  #+begin_example sh
Usage: sqlite3 [OPTIONS] FILENAME [SQL]
FILENAME is the name of an SQLite database. A new database is created
if the file does not previously exist.
OPTIONS include:
   -A ARGS...           run ".archive ARGS" and exit
   -append              append the database to the end of the file
   -ascii               set output mode to 'ascii'
   -bail                stop after hitting an error
   -batch               force batch I/O
   -box                 set output mode to 'box'
   -column              set output mode to 'column'
   -cmd COMMAND         run "COMMAND" before reading stdin
   -csv                 set output mode to 'csv'
   -deserialize         open the database using sqlite3_deserialize()
   -echo                print commands before execution
   -init FILENAME       read/process named file
   -[no]header          turn headers on or off
   -help                show this message
   -html                set output mode to HTML
   -interactive         force interactive I/O
   -json                set output mode to 'json'
   -line                set output mode to 'line'
   -list                set output mode to 'list'
   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory
   -markdown            set output mode to 'markdown'
   -maxsize N           maximum size for a --deserialize database
   -memtrace            trace all memory allocations and deallocations
   -mmap N              default mmap size set to N
   -newline SEP         set output row separator. Default: '\n'
   -nofollow            refuse to open symbolic links to database files
   -nonce STRING        set the safe-mode escape nonce
   -nullvalue TEXT      set text string for NULL values. Default ''
   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory
   -quote               set output mode to 'quote'
   -readonly            open the database read-only
   -safe                enable safe-mode
   -separator SEP       set output column separator. Default: '|'
   -stats               print memory stats before each finalize
   -table               set output mode to 'table'
   -tabs                set output mode to 'tabs'
   -version             show SQLite version
   -vfs NAME            use NAME as the default VFS
   -zip                 open the file as a ZIP Archive
  #+end_example

* Pros and cons

| Pros                               | Cons                             |
|------------------------------------+----------------------------------|
| Very lightweight < 600KB           | Limited concurrency (1 access)   |
| user friendly - zero config        | no user management               |
| self-contained - no dependencies   | security: no data access control |
| highly portable - stored in 1 file | limited data types               |

* Explore the =sqlite3= shell/console/terminal (DQL)

- The learning of a programming language begins with being to get
  answers first on the syntax, and then on the logic of the program

- Get all help on the console from the OS shell: open an shell inside
  Emacs with ~M-x eshell~ and run this command:
  #+begin_src bash
    sqlite3 --help
  #+end_src

  #+RESULTS:

- You can now open SQLite on a new (or existing) database while
  directly specifying that it displays output in tables with columns
  and header.

- Try that with the ~foods.sqlite~ database that you created last time.
  #+begin_example bash
    sqlite3 -header -column foods.sqlite
  #+end_example

- On the console, check that the initialization worked with ~.show~

- If you don't have a database, you still run the command and check
  the settings - the database will now be created.

- Get the help on the console for in-program control commands:
  #+begin_src sqlite :db test.db :header :column :results output
    .help
  #+end_src

  #+RESULTS:
  #+begin_example
  .archive ...             Manage SQL archives
  .auth ON|OFF             Show authorizer callbacks
  .backup ?DB? FILE        Backup DB (default "main") to FILE
  .bail on|off             Stop after hitting an error.  Default OFF
  .binary on|off           Turn binary output on or off.  Default OFF
  .cd DIRECTORY            Change the working directory to DIRECTORY
  .changes on|off          Show number of rows changed by SQL
  .check GLOB              Fail if output since .testcase does not match
  .clone NEWDB             Clone data into NEWDB from the existing database
  .connection [close] [#]  Open or close an auxiliary database connection
  .databases               List names and files of attached databases
  .dbconfig ?op? ?val?     List or change sqlite3_db_config() options
  .dbinfo ?DB?             Show status information about the database
  .dump ?OBJECTS?          Render database content as SQL
  .echo on|off             Turn command echo on or off
  .eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN
  .excel                   Display the output of next command in spreadsheet
  .exit ?CODE?             Exit this program with return-code CODE
  .expert                  EXPERIMENTAL. Suggest indexes for queries
  .explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto
  .filectrl CMD ...        Run various sqlite3_file_control() operations
  .fullschema ?--indent?   Show schema and the content of sqlite_stat tables
  .headers on|off          Turn display of headers on or off
  .help ?-all? ?PATTERN?   Show help text for PATTERN
  .import FILE TABLE       Import data from FILE into TABLE
  .imposter INDEX TABLE    Create imposter table TABLE on index INDEX
  .indexes ?TABLE?         Show names of indexes
  .limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT
  .lint OPTIONS            Report potential schema issues.
  .load FILE ?ENTRY?       Load an extension library
  .log FILE|off            Turn logging on or off.  FILE can be stderr/stdout
  .mode MODE ?TABLE?       Set output mode
  .nonce STRING            Disable safe mode for one command if the nonce matches
  .nullvalue STRING        Use STRING in place of NULL values
  .once ?OPTIONS? ?FILE?   Output for the next SQL command only to FILE
  .open ?OPTIONS? ?FILE?   Close existing database and reopen FILE
  .output ?FILE?           Send output to FILE or stdout if FILE is omitted
  .parameter CMD ...       Manage SQL parameter bindings
  .print STRING...         Print literal STRING
  .progress N              Invoke progress handler after every N opcodes
  .prompt MAIN CONTINUE    Replace the standard prompts
  .quit                    Exit this program
  .read FILE               Read input from FILE
  .recover                 Recover as much data as possible from corrupt db.
  .restore ?DB? FILE       Restore content of DB (default "main") from FILE
  .save FILE               Write in-memory database into FILE
  .scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off
  .schema ?PATTERN?        Show the CREATE statements matching PATTERN
  .selftest ?OPTIONS?      Run tests defined in the SELFTEST table
  .separator COL ?ROW?     Change the column and row separators
  .session ?NAME? CMD ...  Create or control sessions
  .sha3sum ...             Compute a SHA3 hash of database content
  .shell CMD ARGS...       Run CMD ARGS... in a system shell
  .show                    Show the current values for various settings
  .stats ?ARG?             Show stats or turn stats on or off
  .system CMD ARGS...      Run CMD ARGS... in a system shell
  .tables ?TABLE?          List names of tables matching LIKE pattern TABLE
  .testcase NAME           Begin redirecting output to 'testcase-out.txt'
  .testctrl CMD ...        Run various sqlite3_test_control() operations
  .timeout MS              Try opening locked tables for MS milliseconds
  .timer on|off            Turn SQL timer on or off
  .trace ?OPTIONS?         Output each SQL statement as it is run
  .vfsinfo ?AUX?           Information about the top-level VFS
  .vfslist                 List all available VFSes
  .vfsname ?AUX?           Print the name of the VFS stack
  .width NUM1 NUM2 ...     Set minimum column widths for columnar output
  #+end_example

- How can I find out where I am? (Substitute ~pwd~ for ~DIR~ when you're
  on Windows)
  #+begin_src sqlite :db test.db :header :column :results output
    .shell pwd
  #+end_src

  #+RESULTS:
  : /home/marcus/GitHub/db24/org

* Creating a database (DDL)

- Create a new file ~sqlite.org~ to code along. Create a headline
  "Creating a database DDL".

- Use ~<sqlite~ if you defined it in ~org-structure-template-alist~ to
  create a new codeblock. Check which database sqlite3 writes to, and
  if it has any tables in it:
  #+begin_src sqlite :db test.db
    .database
    .tables
  #+end_src

  #+RESULTS:
  : main: /home/marcus/GitHub/db24/org/test.db r/w

* Creating a table with =CREATE TABLE= (DDL)

- The general structure of the command:
  #+begin_example
  CREATE [temp|temporary] TABLE table_name (col_def [constraints]);
  #+end_example

- ~temporary~ tables can be useful for querying but they disappear when
  the session ends - they are transient, not permanent.

- Let's create a simple table ~test~ with an ~INTEGER~ field ~id~ that is a
  ~PRIMARY KEY~, and a ~TEXT~ field called ~value~ - check that it was
  created:
  #+begin_src sqlite :db test.db
    CREATE TABLE test (id INTEGER PRIMARY KEY, value TEXT);
    .tables
  #+end_src

  #+RESULTS:
  : test

- There is a number of ~constraints~ to ensure data integrity.

* SQL Table Constraints

When creating a table in SQL, various constraints can be specified to
enforce data integrity and rules within the table. These constraints
are:

** PRIMARY KEY
- Ensures unique values across the table and cannot contain NULL
  values.
- Uniquely identifies each row in a table.
#+BEGIN_EXAMPLE sql
  CREATE TABLE example (
    id INT PRIMARY KEY,
    name TEXT
  );
#+END_EXAMPLE

- For a composite primary key:
#+BEGIN_EXAMPLE sql
  CREATE TABLE example (
  id1 INT,
  id2 INT,
  name TEXT,
  PRIMARY KEY (id1, id2)
  );
#+END_EXAMPLE

** FOREIGN KEY
- Establishes a relationship between the key columns of two tables.
- Ensures that the value in the child table matches one of the values
  in the parent table's primary key or a unique key.
#+BEGIN_EXAMPLE sql
  CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    product_id INT,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
  );
#+END_EXAMPLE

** UNIQUE
- Ensures that all values in a column are unique.
- Multiple rows can have NULL values unless the column is explicitly
  set to NOT NULL.
#+BEGIN_EXAMPLE sql
  CREATE TABLE example (
    id INT PRIMARY KEY,
    email TEXT UNIQUE
  );
#+END_EXAMPLE

** CHECK
- Specifies a condition that must be true for all rows in the table.
- Used to enforce domain integrity by limiting the values that can be
  stored in a column.
#+BEGIN_SRC sql
  CREATE TABLE example (
  id INT PRIMARY KEY,
  age INT CHECK (age >= 18)
  );
#+END_SRC

** NOT NULL
- Ensures that a column cannot have a NULL value.
- Enforces that a column must always have a data value.
#+BEGIN_SRC sql
  CREATE TABLE example (
  id INT PRIMARY KEY,
  name TEXT NOT NULL
  );
#+END_SRC

** DEFAULT
- Assigns a default value to a column when no value is specified.
- If a row is inserted without a value for this column, the column
  will take the default value.
#+BEGIN_SRC sql
  CREATE TABLE example (
  id INT PRIMARY KEY,
  name TEXT,
  status TEXT DEFAULT 'active'
  );
#+END_SRC

These constraints play a crucial role in maintaining data integrity,
ensuring consistency, and enforcing database rules.

* Inserting values into a table with =INSERT= (DML)

- Since we're returning to this section,
  1) delete the table that you already have in ~test.db~
  2) =CREATE= a new table ~test~ that allows the =INSERT= of an =INTEGER
     =PRIMARY KEY= field ~id~ and a =TEXT= field ~value~.

- Solution:
  #+begin_src sqlite :db test.db :results output :header :column
    --CREATE TABLE test (id INT);
    .tables
    --This command handles an exception
    DROP TABLE IF EXISTS test; -- delete table `test`
    .tables
    CREATE TABLE test
    (id INTEGER PRIMARY KEY,
    value TEXT);
    .schema
  #+end_src

- Enter three records in your table:
  #+begin_src sqlite :db test.db :results silent
    INSERT INTO test (value) VALUES ('Ms. Jane Robinson');
    INSERT INTO test (value) VALUES ('Mme. Carl Robinson');
    INSERT INTO test (value) VALUES ('Mr. Edward Jones');
  #+end_src

* Querying a table (DQL)

- We can look at the entire table (show ~header~ and use ~column~ mode):
  #+begin_src sqlite :db test.db :header :column
    SELECT * FROM test;
  #+end_src

  #+RESULTS:
  : id  value
  : --  ------------------
  : 1   Ms. Jane Robinson
  : 2   Mme. Carl Robinson
  : 3   Mr. Edward Jones

- Notice that despite the code block header you can still change the
  options inside the code block:
  #+begin_src sqlite :db test.db :header :column
    .header off
    SELECT * FROM test LIMIT 2;
  #+end_src

  #+RESULTS:
  : 1   Ms. Jane Robinson
  : 2   Mme. Carl Robinson

- You notice that constraining ~id~ as ~PRIMARY KEY~ included ~AUTO
  INCREMENT~ - the value is automatically increased by one for each new
  row.

- If you used ~AUTO INCREMENT~, you can get the value of the last
  non-empty row with an SQL function:
  #+begin_src sqlite :db test.db :header :column
    DROP TABLE IF EXISTS foo;
    -- create a temporary table
    CREATE TEMP TABLE foo (id INT AUTO INCREMENT, pray TEXT);
    -- insert two records
    INSERT INTO foo (pray) VALUES ("In Nomine Patri");
    INSERT INTO foo (pray) VALUES ("Et Spiritui Sancto");
    SELECT LAST_INSERT_ROWID();
  #+end_src

  #+RESULTS:
  : LAST_INSERT_ROWID()
  : -------------------
  : 2

* Changing table content (DML)

- The second row contains a mistake: it should be 'Mr.' instead of
  'Mme.' (which is French for 'Mrs.'):
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT * FROM test;
  #+end_src

  #+RESULTS:
  : id  value
  : --  ------------------
  : 1   Ms. Jane Robinson
  : 2   Mme. Carl Robinson
  : 3   Mr. Edward Jones

- To change this, we can use =UPDATE=, which uses a /row filter/:
  #+begin_src sqlite :db test.db :results output :header :column
    UPDATE test
    SET value = 'Mr. Carl Robinson'
    WHERE id = 2;
    SELECT  * FROM test;
  #+end_src

  #+RESULTS:
  : id  value
  : --  -----------------
  : 1   Ms. Jane Robinson
  : 2   Mr. Carl Robinson
  : 3   Mr. Edward Jones

- What do you think would happen if you'd forget the =WHERE= clause?
  #+begin_src sqlite :db test.db :results output :header :column
    CREATE TEMP TABLE test1 AS
    SELECT * FROM test; -- makes a copy
    SELECT * FROM test1;
    UPDATE test1
    SET value = 'Mr. Karl Robinson'; -- missing the WHERE filter
    SELECT * FROM test1;
  #+end_src

  #+RESULTS:
  #+begin_example
  id  value
  --  -----------------
  1   Ms. Jane Robinson
  2   Mr. Carl Robinson
  3   Mr. Edward Jones
  id  value
  --  -----------------
  1   Mr. Karl Robinson
  2   Mr. Karl Robinson
  3   Mr. Karl Robinson
  #+end_example

* Change table structure (DDL)

- SQLite is more limited to making schema changes than other SQL
  flavors,because of its architecture:
  1) You can rename tables
  2) You can add columns to an existing table
  3) You can drop existing columns from an existing table
  4) You can NOT delete, change or rename columns

- The DDL command is =ALTER TABLE=:
  #+begin_example sqlite
    ALTER TABLE tbl_name {REN|AME TO new_name | ADD COLUMN colDef}
  #+end_example

- We rename the table ~test~ to ~test_new~:
  #+begin_src sqlite :db test.db :results output :header :column
    .tables
    ALTER TABLE test RENAME TO test_new;
    .tables
    ALTER TABLE test_new RENAME TO test;
    .tables
  #+end_src

  #+RESULTS:
  : test
  : test_new
  : test

- We can also add a column:
  #+begin_src sqlite :db test.db :results output :header :column
    ALTER TABLE test ADD COLUMN sex TEXT;
    SELECT * FROM test;
  #+end_src

  #+RESULTS:
  : id  value              sex
  : --  -----------------  ---
  : 1   Ms. Jane Robinson
  : 2   Mr. Carl Robinson
  : 3   Mr. Edward Jones

- Delete the new column again with the =DROP COLUMN= clause, and then
  review the database structure:
  #+begin_src sqlite :db test.db :results output :header :column
    ALTER TABLE test DROP COLUMN sex;
    .schema
  #+end_src

  #+RESULTS:
  : CREATE TABLE IF NOT EXISTS "test" (id INTEGER PRIMARY KEY, value TEXT);

* Viewing the table index (DDL)

- An index is a keyword index. Creating an index speeds up DQL
  commands and slows down DML commands.

- The following command creates an index for the only non-trivial
  column of the table ~test~:
  #+begin_src sqlite :db test.db :results silent :header :column
    CREATE INDEX test_idx ON test (value);
  #+end_src

- The console command =.indices= lists the defined indices, and the
  =.schema= command shows that the db architecture has changed:
  #+begin_src sqlite :db test.db :results output :header :column
    .indices test
    .schema
  #+end_src

  #+RESULTS:
  : test_idx
  : CREATE TABLE IF NOT EXISTS "test" (id INTEGER PRIMARY KEY, value TEXT);
  : CREATE INDEX test_idx ON test (value);

- We will prefer graphical (ERD) descriptions of the database
  architecture as soon as we have more than a handful of tables.

* Viewing table views (DQL)

- Let's rekindle our knowledge of stored queries or views: for
  example a view that contains only the ~value~ column. And
  let's check the db size before the transaction:
  #+begin_src sqlite :db test.db :results output :header :column
    .shell ls -l test.db
  #+end_src

  #+RESULTS:
  : -rw-r--r-- 1 marcus marcus 12288 Feb 20 15:36 test.db

- Create the view:
  #+begin_src sqlite :db test.db :results output :header :column
    CREATE VIEW value_view AS SELECT value FROM test;
    .tables
    .schema
  #+end_src

  #+RESULTS:
  : test        value_view
  : CREATE TABLE IF NOT EXISTS "test" (id INTEGER PRIMARY KEY, value TEXT);
  : CREATE INDEX test_idx ON test (value);
  : CREATE VIEW value_view AS SELECT value FROM test
  : /* value_view(value) */;

- As you can see, ~value_view~ is listed by =.tables=. If you
  check the size, you'll see that it has not visibly changed:
  #+begin_src sqlite :db test.db :results output :header :column
    .shell ls -l test.db
  #+end_src

  #+RESULTS:
  : -rw-r--r-- 1 marcus marcus 12288 Feb 20 15:39 test.db

- You can delete views like tables with =DROP VIEW=.


* /*** STARTING OVER FROM HERE ***/

Run this if you have ~test.db~ (otherwise you'll get an error).
#+begin_src sqlite :db test.db :results silent :header :column 
  .shell rm test.db    /* on Windows, may have to use DEL */
#+end_src

Run the following code block on ~test.db~ to have a working database
with an index and a view in it so that you can continue from here.
#+begin_src sqlite :db test.db :results output :header :column

  /* starting over with table creation */
  CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY, value TEXT);

  /* insert records */
  INSERT INTO test (value) VALUES ('Ms. Jane Robinson');
  INSERT INTO test (value) VALUES ('Mme. Carl Robinson');
  INSERT INTO test (value) VALUES ('Mr. Edward Jones');

  /* correct record */
  UPDATE test SET VALUE='Mr. Carl Robinson' WHERE id=2;

  /* create table index for `value` column */
  CREATE INDEX test_idx ON test (value);

  /* create stored query view */
  CREATE VIEW value_view AS SELECT value from test;

  /* check tables and db schema */
  .tables
  .schema
#+end_src

#+RESULTS:
: test        value_view
: CREATE TABLE test (id INTEGER PRIMARY KEY, value TEXT);
: CREATE INDEX test_idx ON test (value);
: CREATE VIEW value_view AS SELECT value from test
: /* value_view(value) */;

Check content of ~test~ table:
#+begin_src sqlite :db test.db :results output :header :column 
  SELECT * FROM test;
#+end_src

#+RESULTS:
: id  value            
: --  -----------------
: 1   Ms. Jane Robinson
: 2   Mr. Carl Robinson
: 3   Mr. Edward Jones 

* Formatted printing (DQL)

- SQLite has its own =printf= function, which you know from C:
  #+begin_src sqlite :db test.db :results output :header :column
    .header off
    SELECT printf("The database contains %s", value) FROM test;
  #+end_src

  #+RESULTS:
  : The database contains Ms. Jane Robinson  
  : The database contains Mr. Carl Robinson  
  : The database contains Mr. Edward Jones   

- On Windoze, you need single quotes.

- Sometimes, the SQLite version has unexpected effects.
  #+begin_src sqlite :db test.db :results output :header :column 
     .version
  #+end_src

  #+RESULTS:
  : SQLite 3.37.2 2022-01-06 13:25:41 872ba256cbf61d9290b571c0e6d82a20c224ca3ad82971edc46b29818d5dalt1
  : zlib version 1.2.11
  : gcc-11.4.0

* Viewing the master table (DQL)

- All the DDL commands are entered in a master table, which is
  named =sqlite_master= whose schema you can inspect:
  #+begin_src sqlite :db test.db :results output :header :column
    .schema sqlite_master
  #+end_src

  #+RESULTS:
  : CREATE TABLE sqlite_master (
  :   type text,
  :   name text,
  :   tbl_name text,
  :   rootpage integer,
  :   sql text
  : );

- When you display the table's contents, you see the different
  layers of abstraction that we have generated so far:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT type, name, tbl_name, sql
           FROM sqlite_master;
  #+end_src

  #+RESULTS:
  : type   name        tbl_name    sql                                                   
  : -----  ----------  ----------  ------------------------------------------------------
  : table  test        test        CREATE TABLE test (id INTEGER PRIMARY KEY, value TEXT)
  : index  test_idx    test        CREATE INDEX test_idx ON test (value)                 
  : view   value_view  value_view  CREATE VIEW value_view AS SELECT value from test      

* Exporting data (DML)

- You've seen the =.dump= console command before. Without
  additional options, the whole db will be dumped.

- Let's look at the options using =.help=:
  #+begin_src sqlite :db test.db :results output :header :column
    .help .dump
  #+end_src

  #+RESULTS:
  : .dump ?OBJECTS?          Render database content as SQL
  :    Options:
  :      --data-only            Output only INSERT statements
  :      --newlines             Allow unescaped newline characters in output
  :      --nosys                Omit system tables (ex: "sqlite_stat1")
  :      --preserve-rowids      Include ROWID values in the output
  :    OBJECTS is a LIKE pattern for tables, indexes, triggers or views to dump
  :    Additional LIKE patterns can be given in subsequent arguments

- Let's test this with the content of the ~test~ table - notice
  that the =--= is part of a flag, and not the SQL comment sign:
  1) redirect =.output= to ~test_data.sql~
  2) =.dump --data-only=
  3) redirect =.output= to ~stdout~
  4) view the file on the OS shell with =cat=
  #+begin_src sqlite :db test.db :results output :header :column
    .output test_data.sql
    .dump --data-only
    .output stdout
    .shell cat test_data.sql  /* on Windoze, try TYPE instead of `cat` */
  #+end_src

  #+RESULTS:
  : INSERT INTO test VALUES(1,'Ms. Jane Robinson');
  : INSERT INTO test VALUES(2,'Mr. Carl Robinson');
  : INSERT INTO test VALUES(3,'Mr. Edward Jones');

- Compare this with the complete database dump: repeat all
  commands but without the =--data-only= option, and dump into
  ~test_all.sql~:
  #+begin_src sqlite :db test.db :results output :header :column
    .output test_all.sql
    .dump
    .output stdout
    .shell cat test_all.sql /* On Windoze replace `cat` by TYPE */
  #+end_src

  #+RESULTS:
  : PRAGMA foreign_keys=OFF;
  : BEGIN TRANSACTION;
  : CREATE TABLE test (id INTEGER PRIMARY KEY, value TEXT);
  : INSERT INTO test VALUES(1,'Ms. Jane Robinson');
  : INSERT INTO test VALUES(2,'Mr. Carl Robinson');
  : INSERT INTO test VALUES(3,'Mr. Edward Jones');
  : CREATE INDEX test_idx ON test (value);
  : CREATE VIEW value_view AS SELECT value from test;
  : COMMIT;

- You can also use =.mode= to only extract query content. Check
  out the =.help= first:
  #+begin_src sqlite :db test.db :results output :header :column
    .help mode
  #+end_src

  #+RESULTS:
  #+begin_example
  .mode MODE ?TABLE?       Set output mode
     MODE is one of:
       ascii     Columns/rows delimited by 0x1F and 0x1E
       box       Tables using unicode box-drawing characters
       csv       Comma-separated values
       column    Output in columns.  (See .width)
       html      HTML <table> code
       insert    SQL insert statements for TABLE
       json      Results in a JSON array
       line      One value per line
       list      Values delimited by "|"
       markdown  Markdown table format
       quote     Escape answers as for SQL
       table     ASCII-art table
       tabs      Tab-separated values
       tcl       TCL list elements
  #+end_example

- Write only the third row of ~test~ into another file, called
  ~test_row.sql~ using ~.mode insert~:
  #+begin_src sqlite :db test.db :results output :header :column
    .mode insert
    .output test_row.sql
    SELECT * FROM test WHERE id=3; -- 3rd row only
    .output stdout
    .shell cat test_row.sql  /* On Windoze, use TYPE instead of `cat` */
  #+end_src

  #+RESULTS:
  : INSERT INTO "table"(id,value) VALUES(3,'Mr. Edward Jones');

- You can now use the file ~test_row.sql~ to import data into a
  table called ~'table'~:
  #+begin_src sqlite :db test.db :results output :header :column
    CREATE TABLE IF NOT EXISTS 'table' (id INTEGER, value TEXT);
    .tables
    .read test_row.sql
    SELECT * FROM 'table';
  #+end_src

  #+RESULTS:
  : table       test        value_view
  : id  value           
  : --  ----------------
  : 3   Mr. Edward Jones

* Deleting a table and a view (DDL)

- To delete a table and a view, use =DROP TABLE= and handle the
  exceptions:
  #+begin_src sqlite :db test.db :results output :header :column
    DROP TABLE IF EXISTS 'table';
    DROP VIEW IF EXISTS value_view;
    .tables
  #+end_src

  #+RESULTS:
  : test

- There is no =DROP DATABASE= command in SQLite (but there is in all
  other SQL flavors).
  
* Deleting a database (DDL)

- There is no 'drop database' command in SQLite (unlike in
  other SQL flavors). Instead you just delete the database
  file:
  #+begin_src sqlite :db test.db :results output :header :column
    .database
    .tables
    .shell ls -l test.db /* on Windoze, use DIR instead of `ls -l` */
    .shell rm test.db /* On Windoze, use DEL instead of `rm` */
    .shell ls -l test.db
    .tables
  #+end_src

  #+RESULTS:
  : main: /home/marcus/GitHub/db24/org/test.db r/w

* TODO Importing data (DML)

- You can import data to SQLite in two different ways:
  1) if the data are in an SQLite file (~.sql~) you can =.read= them.
  2) if the data are in a CSV file (~.csv~) you can =.import= them.

- Earlier, you saved the table to ~test_all.sql~. Check out that this is
  indeed an SQL file from the console:
  #+begin_src sqlite :db test.db :results output :header :column
    .shell head -n 5 test_all.sql  /* On Windoze try TYPE instead of `head -n 5` */
  #+end_src

- If you don't have it for one reason or another, you can upload it
  from ~tinyurl.com/test-sql~.

- Read the table into ~test.db~ using =.read=:
  #+begin_src sqlite :db test.db :results output :header :column
    .tables
    .read test_all.sql
    .tables
    SELECT * FROM test;
  #+end_src

  #+RESULTS:
  : test        value_view
  : test        value_view
  : id  value            
  : --  -----------------
  : 1   Ms. Jane Robinson
  : 2   Mr. Carl Robinson
  : 3   Mr. Edward Jones 

- If you try to re-import the data, the =UNIQUE= constraint will fail -
  do you know why?

- Upload the CSV test file from ~tinyurl.com/test-all-csv~ to your
  current working directory (where this file is).

#+RESULTS:
: test        value_view

- Check out which =.separator= SQLite is currently working with, and if
  it's not "," then change it to ",". Then =.import= the file to another
  table, ~test_csv~:
  #+begin_src sqlite :db test.db :results output :header :column
    .show
    .separator ","
    .show
    .import test_csv.csv test_csv  /* 1st file = source, 2nd file = target */
    .tables
    SELECT * FROM test_csv;
  #+end_src

  #+RESULTS:
  #+begin_example
          echo: off
           eqp: off
       explain: auto
       headers: on
          mode: column
     nullvalue: ""
        output: stdout
  colseparator: "|"
  rowseparator: "\n"
         stats: off
         width: 
      filename: test.db
          echo: off
           eqp: off
       explain: auto
       headers: on
          mode: column
     nullvalue: ""
        output: stdout
  colseparator: ","
  rowseparator: "\n"
         stats: off
         width: 
      filename: test.db
  ERROR: extra argument: "/*".  Usage:
  .import FILE TABLE       Import data from FILE into TABLE
     Options:
       --ascii               Use \037 and \036 as column and row separators
       --csv                 Use , and \n as column and row separators
       --skip N              Skip the first N rows of input
       -v                    "Verbose" - increase auxiliary output
     Notes:
       ,*  If TABLE does not exist, it is created.  The first row of input
          determines the column names.
       ,*  If neither --csv or --ascii are used, the input mode is derived
          from the ".mode" output mode
       ,*  If FILE begins with "|" then it is a command that generates the
          input text.
  test        value_view
  #+end_example

* TODO Writing CSV files (DML)

- Using =.output=, you can also write CSV data. Write the data from the
  table ~test~ to a file ~test_all.csv~ using =.mode csv=
  #+begin_src sqlite :db test.db :results output :header :column
    .mode csv
    .output test_all.csv
    SELECT * FROM test;  -- this will now be written to CSV
    .output stdout
    .shell cat test_all.csv
  #+end_src

  #+RESULTS:
  : id,value
  : 1,"Ms. Jane Robinson"
  : 2,"Mr. Carl Robinson"
  : 3,"Mr. Edward Jones"

* TODO Interfacing with the shell (DCL)

- Almost all console commands can also be called from the command line
  interface (CLI). For example to =.dump= the entire database:
  #+begin_src bash :results output
    sqlite3 test.db .dump
  #+end_src

  #+RESULTS:
  : PRAGMA foreign_keys=OFF;
  : BEGIN TRANSACTION;
  : CREATE TABLE test (id INT PRIMARY KEY, value TEXT);
  : INSERT INTO test VALUES(NULL,'Ms. Jane Robinson');
  : INSERT INTO test VALUES(NULL,'Mme. Carl Robinson');
  : INSERT INTO test VALUES(NULL,'Mr. Edward Jones');
  : CREATE INDEX test_idx ON test (value);
  : CREATE VIEW value_view AS SELECT value from test;
  : COMMIT;

- Notice that this last code block executes =bash= (the shell program),
  and not SQLite. If you don't have =bash= on your computer you can
  either install it via Cygwin or MSYS2, or you can run the =sqlite3=
  command on a separate CLI (Windows: CMD, MacOS: terminal).

- Or to =SELECT= the records:
  #+begin_src bash :results output
    sqlite3 -header -column test.db "SELECT * FROM test"
  #+end_src

  #+RESULTS:
  : id  value
  : --  ------------------
  :     Ms. Jane Robinson
  :     Mme. Carl Robinson
  :     Mr. Edward Jones
  : CREATE TABLE test (id INT PRIMARY KEY, value TEXT);
  : CREATE INDEX test_idx ON test (value);
  : CREATE VIEW value_view AS SELECT value from test
  : /* value_view(value) */;

- You didn't need a delimiter here, and you can add other commands,
  too:
  #+begin_src bash :results output
    sqlite3 -header -column test.db "SELECT * FROM test" .schema
  #+end_src

  #+RESULTS:
  : id  value
  : --  ------------------
  :     Ms. Jane Robinson
  :     Mme. Carl Robinson
  :     Mr. Edward Jones
  : CREATE TABLE test (id INT PRIMARY KEY, value TEXT);
  : CREATE INDEX test_idx ON test (value);
  : CREATE VIEW value_view AS SELECT value from test
  : /* value_view(value) */;

- The CLI in Linux supports redirection (the Windows shell does not):
  #+begin_src bash :results output
    sqlite3 test2.db < test_all.sql   # redirect stdin to database
    sqlite3 -csv test2.db "SELECT * FROM test"  # output test as CSV
  #+end_src

  #+RESULTS:
  : 1,"Ms. Jane Robinson"
  : 2,"Mr. Carl Robinson"
  : 3,"Mr. Edward Jones"

- You can also initialise a database with an ~.sql~ file:
  #+begin_src bash :results silent
    sqlite3 -init test_all.sql test3.db
  #+end_src

- Now check that ~test3.db~ was created:
  #+begin_src bash :results output
    ls -l test3.db test.db
  #+end_src  

  #+RESULTS:
  : -rw-r--r-- 1 marcus marcus 12288 Feb 20 19:01 test3.db
  : -rw-r--r-- 1 marcus marcus 16384 Feb 20 18:35 test.db

- Whenever you invoke =sqlite3= on the CLI (not in a code block), the
  program will be started. If you don't want that, end with =.exit=:
  #+begin_example bash :results output
    sqlite3 -init test.sql test4.db .exit
    ls -l test*.db
  #+end_example

