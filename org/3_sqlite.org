#+STARTUP: hideblocks overview indent:
#+OPTIONS: toc:nil num:nil ^:nil: 
* SQLite overview
#+attr_html: :width 400px: 
[[../img/sqlite_intro.png]]

* Single-file approach (instead of client/server)

 SQLite architecture vs. RDBMS client/server architecture:
  1. No management system between database files and user apps
  2. Instead just one file directly connected to the user app

* Declarative programming language
  
 SQLite is a declarative programming language. Its properties:
  1. DDL: creating and altering tables
     #+begin_example sqlite
     CREATE [temp] TABLE table_name (col_def [constraints]);
     ALTER TABLE table_name (RENAME TO new_name|ADD COLUMN col_def);
     #+end_example
     Data types available: =REAL=, =TEXT=, =BLOB= =NULL=
  2. Exporting data (SQLite <-> shell)
  3. Deleting data (DDL for tables + DML for table content)
  4. Importing data (SQLite <-> shell)
  5. Querying data (DQL)

- You can use graphical development tools but SQLite favors the
  command line. It has a small set of flags and options:
  #+begin_src bash
    sqlite3 --help
  #+end_src
  #+begin_example sh
Usage: sqlite3 [OPTIONS] FILENAME [SQL]
FILENAME is the name of an SQLite database. A new database is created
if the file does not previously exist.
OPTIONS include:
   -A ARGS...           run ".archive ARGS" and exit
   -append              append the database to the end of the file
   -ascii               set output mode to 'ascii'
   -bail                stop after hitting an error
   -batch               force batch I/O
   -box                 set output mode to 'box'
   -column              set output mode to 'column'
   -cmd COMMAND         run "COMMAND" before reading stdin
   -csv                 set output mode to 'csv'
   -deserialize         open the database using sqlite3_deserialize()
   -echo                print commands before execution
   -init FILENAME       read/process named file
   -[no]header          turn headers on or off
   -help                show this message
   -html                set output mode to HTML
   -interactive         force interactive I/O
   -json                set output mode to 'json'
   -line                set output mode to 'line'
   -list                set output mode to 'list'
   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory
   -markdown            set output mode to 'markdown'
   -maxsize N           maximum size for a --deserialize database
   -memtrace            trace all memory allocations and deallocations
   -mmap N              default mmap size set to N
   -newline SEP         set output row separator. Default: '\n'
   -nofollow            refuse to open symbolic links to database files
   -nonce STRING        set the safe-mode escape nonce
   -nullvalue TEXT      set text string for NULL values. Default ''
   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory
   -quote               set output mode to 'quote'
   -readonly            open the database read-only
   -safe                enable safe-mode
   -separator SEP       set output column separator. Default: '|'
   -stats               print memory stats before each finalize
   -table               set output mode to 'table'
   -tabs                set output mode to 'tabs'
   -version             show SQLite version
   -vfs NAME            use NAME as the default VFS
   -zip                 open the file as a ZIP Archive
  #+end_example

* Pros and cons

  | +                                  | -                                |
  |------------------------------------+----------------------------------|
  | Very lightweight < 600KB           | Limited concurrency (1 access)   |
  | user friendly - zero config        | no user management               |
  | self-contained - no dependencies   | security: no data access control |
  | highly portable - stored in 1 file | limited data types               |

