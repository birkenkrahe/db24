#+STARTUP: hideblocks overview indent entitiespretty :
#+OPTIONS: toc:nil num:nil ^:nil:
#+PROPERTY: header-args:sqlite :results output
* README

- Open [[http://tinyurl.com/select-org][tinyurl.com/select-org]] to code along and save as ~select.org~

- Download the foods database as an SQL file from
  [[http://tinyurl.com/foods-sql][tinyurl.com/foods-sql]] and save it as foods.sql

- Either import the ~foods~ database from the commandline:
  #+begin_example bash
    sqlite3 foods.db < foods.sql
  #+end_example

- Or import the database in a code block:
  #+begin_src sqlite :db foods.db :results output :header :column
    .read ../data/foods.sql
    .database
    .tables
  #+end_src

  #+RESULTS:
  : main: /home/marcus/GitHub/db24/org/foods.db r/w
  : episodes        food_types      foods           foods_episodes

#+begin_src bash
  ls -l foods.db   # DIR foods.db
#+end_src

#+RESULTS:
: -rw-r--r-- 1 marcus marcus 40960 Mar  7 15:01 foods.db

- If we don't finish, you'll get the updated file at the start

Content:
- Overview of the =SELECT= pipeline
- Projection and restriction/filtering
- Anatomy of the =WHERE= clause
- Values and data types
- Unary, binary, and ternary operators

* =SELECT= command overview
#+attr_html: :width 700px:
[[../img/select1.png]]

- [[https://xmind.app/m/Rg5Dw8][The mindmap]] contains 91 examples but you need to open XMind
  (xmind.app) to see it, alas ([[https://github.com/birkenkrahe/db24/blob/main/img/SELECT.xmind][GitHub copy)]].

* =SELECT= pipeline overview

- Phases of =SELECT=
  #+attr_html: :width 600px:
  [[../img/select_phases.png]]

* =SELECT= column restriction (projection)

- =SELECT= is the most complex command in SQL.

- =SELECT= projects columns into a new working table.
  #+attr_html: :width 300px:
  [[../img/select_project.png]]

  #+begin_src sqlite :db ../data/foods.db :results output :header :column
    SELECT name FROM food_types;
  #+end_src

  #+RESULTS:
  #+begin_example
  name
  ------------
  Bakery
  Cereal
  Chicken/Fowl
  Condiments
  Dairy
  Dip
  Drinks
  Fruit
  Junkfood
  Meat
  Rice/Pasta
  Sandwiches
  Seafood
  Soup
  Vegetables
  #+end_example

  But how many columns does this table have?
  #+begin_src sqlite :db ../data/foods.db :results output :header :column
    .schema food_types
  #+end_src

  #+RESULTS:
  : CREATE TABLE food_types(
  :   id integer primary key,
  :   name text );

* =WHERE= row restriction (filtering)

- The =WHERE= clause is the most complex clause in =SELECT.=

- =SELECT= projects, and =WHERE= restricts the number of rows. In between,
  virtual tables R1 and R2 are created.
  #+attr_html: :width 700px:
  [[../img/select_restrict.png]]

  #+begin_src sqlite :db ../data/foods.db :results output :header :column
    SELECT name FROM foods WHERE (id=1 OR id=2); /* restriction with Boolean expression */
  #+end_src

  #+RESULTS:
  : name
  : --------------
  : Bagels
  : Bagels, raisin

- The argument of =WHERE= is a logical /predicate/.

- A predicate is an /assertion/ about something:
  #+begin_quote
  "The dog is purple and has a toothy grin."
  #+end_quote

  Here, ~dog~ is the *subject*, and ~"color is purple"~ and ~"grin is toothy"~
  is the *predicate*.

- The logical *subject* in the =WHERE= clause is a row.

- The =WHERE= clause is the logical *predicate*.

- How would the sentence above be translated into SQL?
  #+begin_quote
  SELECT * FROM dogs WHERE color='purple' AND grin='toothy';
  #+end_quote
  1) ~dogs~ is the table with all data about dogs
  2) ~color~ and ~grin~ are two column in ~dogs~

- This statement would filter those rows that satisfy the logical
  proposition:
  #+begin_quote
  This row has color='purple' and grin='toothy'
  #+end_quote

* Values and data types

- /Values/ represent data in in the real world.

- Values are classified by their type (numeric, string, date etc.)

- Values can be expressed as one of:

  1) *literals* (unchangeable) - like ~1~, ~2~, ~3~, "~Batesville~" etc.
     #+begin_src sqlite :db ../data/foods.db :results output :header :column
       SELECT "Batesville" AS 'City of';
     #+end_src

     #+RESULTS:
     : City of
     : ----------
     : Batesville

     #+begin_src sqlite :db ../data/foods.db :results output :header :column
       SELECT '1,2,3' AS "numbers";
     #+end_src

     #+RESULTS:
     : numbers
     : -------
     : 1,2,3

  2) *variables* (changeable) - e.g. column names like ~foods.name~
     #+begin_src sqlite :db ../data/foods.db :results output :header :column
       SELECT foods.name FROM foods LIMIT 2;
     #+end_src

     #+RESULTS:
     : name
     : --------------
     : Bagels
     : Bagels, raisin

  3) *expressions* (reducible) - e.g. ~3 + 2/5~
     #+begin_src sqlite :db ../data/foods.db :results output :column
       SELECT 3+2/5;  /* without decimal point, rounding takes place */
       SELECT 3.+2./17.;
     #+end_src

     #+RESULTS:
     : 3
     : 3.11764705882353

  4) *function results* - e.g. ~COUNT(foods.name))~
     #+begin_src sqlite :db ../data/foods.db :results output :header :column
       SELECT COUNT(foods.name) AS "No. of foods" FROM foods;
     #+end_src

     #+RESULTS:
     : No. of foods
     : ------------
     : 412

* Operators
#+attr_html: :width 600px:
[[../img/operators.png]]

- An operator takes one or more values as input and produces a value as output.

- Unary/Binary/Ternary operators take 1/2/3 input values (operands).

- Operators can be /pipelined/ and strung together forming value expressions:
  #+begin_example
  x = count(episodes.name)
  y = count(foods.name)
  z = y/x * 11
  #+end_example

- In ~foods~, this could look like this (max 1000 subqueries in SQLite)[fn:1]:
  #+begin_src sqlite :db ../data/foods.db :results output :column
    SELECT
    (SELECT COUNT(name) FROM foods)/
    (SELECT COUNT(name) FROM episodes) * 11;
  #+end_src

  #+RESULTS:
  : 22

- Redo this with =REAL= numbers:
  #+begin_src sqlite :db ../data/foods.db :results output :column
    SELECT
    ((SELECT COUNT(name) FROM foods) * 1.0 /
    (SELECT COUNT(name) FROM episodes) ) * 11.0;
  #+end_src

  #+RESULTS:
  : 25.0386740331492

- Or you could create a temporary table ~TempResult~ to hold the result:
  #+begin_src sqlite :db ../data/foods.db :results output :header :column
    CREATE TEMP TABLE TempResult AS
    SELECT
    ((SELECT COUNT(name) * 1.0 FROM foods) /
    (SELECT COUNT(name) FROM episodes)) * 11.0 AS result;
    .tables
    SELECT * FROM temp.TempResult;
  #+end_src

  #+RESULTS:
  : episodes         foods            temp.TempResult
  : food_types       foods_episodes
  : result
  : ----------------
  : 25.0386740331492

- As a Common Table Expression (CTE):
  #+begin_src sqlite :db ../data/foods.db :results output :header :column
    WITH ComputedResult AS (
    SELECT
    ((SELECT COUNT(name) * 1.0 FROM foods) /
    (SELECT COUNT(name) FROM episodes)) * 11.0 AS result
    )
    SELECT result FROM ComputedResult;
  #+end_src

  #+RESULTS:
  : result
  : ----------------
  : 25.0386740331492

- SQLite has a ternary operator-like structure in the =CASE= statement:
  #+begin_example sqlite
  SELECT
    CASE
      WHEN condition THEN true_value
      ELSE false_value
    END AS ResultColumn
  FROM TableName;
  #+end_example

- This SQL snippet demonstrates how to use the =CASE= statement in
  SQLite to mimic a ternary operator. It evaluates a condition for
  each row in the table ~TableName~. If the condition is true, it
  returns ~true_value~; otherwise, it returns ~false_value~ in the
  ~ResultColumn~.

- For ~foods~, we could for example check if a food type is sweet and
  print that information as a new (virtual) column ~Sweet~:

  #+begin_src sqlite :db foods.db :results output :header :column
    SELECT name,
    CASE
    WHEN name='Bakery' OR name='Cereal' OR name='Fruit' THEN 'yes'
    ELSE 'no'
    END AS 'Sweet'
    FROM food_types;
  #+end_src

  #+RESULTS:
  #+begin_example
  name          Sweet
  ------------  -----
  Bakery        yes
  Cereal        yes
  Chicken/Fowl  no
  Condiments    no
  Dairy         no
  Dip           no
  Drinks        no
  Fruit         yes
  Junkfood      no
  Meat          no
  Rice/Pasta    no
  Sandwiches    no
  Seafood       no
  Soup          no
  Vegetables    no
  #+end_example

- This is /ternary/ (three-way) in the sense that each row in the ~name~
  column is input, with two output possibilities depending on the =CASE.=

* Binary operators

- Binary operators (operators with two operands) are the most common
  ones. The table lists them by precedence from highest to lowest.
  #+attr_html: :width 600px:
  [[../img/binary_operators.png]]

* String concatenation

- String concatenation can be used to combine field values:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT name || '(' || season || ')' AS 'Episode (#)' FROM episodes LIMIT 1,3;
  #+end_src

  #+RESULTS:
  : Episode (#)
  : -----------------
  : Male Unbonding(1)
  : The Stake Out(1)
  : The Robbery(1)

- Is ~"Episode (#)~ a new table?
#+begin_src sqlite :db test.db :results output :header :column
  .schema
#+end_src

#+RESULTS:
#+begin_example
CREATE TABLE episodes (
  id integer primary key,
  season int,
  name text );
CREATE TABLE foods(
  id integer primary key,
  type_id integer,
  name text );
CREATE TABLE foods_episodes(
  food_id integer,
  episode_id integer );
CREATE TABLE food_types(
  id integer primary key,
  name text );
#+end_example

* Relational operators

- These operators work even without reference to any table:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT 1 > 2-2; /* order or precedence is observed */
    SELECT 1 < 2;
    SELECT 1 == 2; /* Same result as 1 = 2 */
    SELECT 1 = 2; /* Same result as 1 == 2 */
  #+end_src

  #+RESULTS:
  #+begin_example
  1 > 2-2
  -------
  1
  1 < 2
  -----
  1
  1 == 2
  ------
  0
  1 = 2
  -----
  0
  #+end_example

* Logical operators

- Logical operators (=AND=, =OR=, =NOT=, =IN=) are binary operators that
  operate no truth values or logical expressions. Here, like in C, any
  non-zero value is ~TRUE~.

-  What do you think ~SELECT -1 AND 1;~ will yield?
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT -1 AND 1; /* same as TRUE AND TRUE */
  #+end_src

  #+RESULTS:
  : -1 AND 1
  : --------
  : 1

- Try ~SELECT 0 AND 1~ and ~0 OR 1~:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT 0 AND 1;
    SELECT 0 OR 1;
  #+end_src

  #+RESULTS:
  : 0 AND 1
  : -------
  : 0
  : 0 OR 1
  : ------
  : 1

- Bonus assignment: prove De Morgan's laws[fn:2] using ~SELECT~:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT NOT(1 OR 0);
    SELECT (NOT 1 AND NOT 0);
  #+end_src

  #+RESULTS:
  : NOT(1 OR 0)
  : -----------
  : 0
  : (NOT 1 AND NOT 0)
  : -----------------
  : 0

- What if you wanted values in a particular range, e.g. ~id \in [3,8)~
  #+begin_src sqlite :db foods.db :results output :header :column
    SELECT id, name FROM foods WHERE 3 <= id AND id < 8; /* id in [3,8) */
  #+end_src

  #+RESULTS:
  : id  name
  : --  -----------------------
  : 3   Bavarian Cream Pie
  : 4   Bear Claws
  : 5   Black and White cookies
  : 6   Bread (with nuts)
  : 7   Butterfingers

- What if you wanted values outside of the range ~id \in [3,8)~
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT id, name FROM foods WHERE  id < 3 OR 8 <= id LIMIT 5; /* id NOT in [3,8) */
  #+end_src

  #+RESULTS:
  : id  name
  : --  ------------------
  : 1   Bagels
  : 2   Bagels, raisin
  : 8   Carrot Cake
  : 9   Chips Ahoy Cookies
  : 10  Chocolate Bobka

- What if you wanted to know if there is a ~Junkfood~ (~type_id = 9~)
  named ~JujyFruit~?
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT * FROM foods WHERE name='JujyFruit' AND type_id=9;
  #+end_src

  #+RESULTS:
  : id   type_id  name
  : ---  -------  ---------
  : 244  9        JujyFruit

- The =IN= operator is used to check if a value matches a value in a
  list or a subquery result. For example: how many ~foods~ are chicken
  (~type_id=3~) or meat (~type_id=10~)?
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT COUNT() AS "Chicken or meat" FROM foods WHERE type_id IN (3,10);
  #+end_src

  #+RESULTS:
  : Chicken or meat
  : ---------------
  : 59

* The =LIKE= and =GLOB= operators

- The =LIKE= operator is used to match string values against patterns
  (like =grep=).

- Say you wanted to know all ~foods~ whose name begins with a ~J~:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT id, name FROM foods WHERE name LIKE 'J%';
  #+end_src

  #+RESULTS:
  : id   name
  : ---  ------------------
  : 156  Juice box
  : 236  Jucyfruit Gum
  : 243  Jello with Bananas
  : 244  JujyFruit
  : 245  Junior Mints
  : 370  Jambalaya

- Here, a percent symbol =%= matches any sequence of zero or more
  characters in the string.

- An underscore symbol ~_~ matches any single character in the string.

- Example: find all ~foods~ that have ~ac~ and ~P~ somewhere in the ~name~.
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT id, name FROM foods WHERE name LIKE '%ac%P%';
  #+end_src

  #+RESULTS:
  : id   name
  : ---  --------------------
  : 38   Pie (Blackberry) Pie
  : 127  Guacamole Dip
  : 168  Peach Schnapps
  : 198  Macinaw peaches

- If you remove the last =%= sign, you're only looking for ~foods~ that
  also end in ~p~ or ~P.~

- =LIKE= is not case-sensitive in all SQL flavors. In SQLite, you can
  switch case sensitivity on (=PRAGMA case_sensitive_like=ON=):
  #+begin_src sqlite :db test.db :results output :header :column
    PRAGMA case_sensitive_like=OFF;  /* Values are ON or OFF */
    SELECT id, name FROM foods WHERE name LIKE '%ac%P%';
  #+end_src

  #+RESULTS:
  : id   name
  : ---  --------------------
  : 38   Pie (Blackberry) Pie
  : 127  Guacamole Dip
  : 168  Peach Schnapps
  : 198  Macinaw peaches

- A useful trick is NOT to negate a pattern: for example, if you did
  not want ~foods~ with ~Sch~ in the name (excludes German/Dutch foods):
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT id, name FROM foods
    WHERE name LIKE '%ac%P%' AND name NOT LIKE '%Sch%';
  #+end_src

  #+RESULTS:
  : id   name
  : ---  --------------------
  : 38   Pie (Blackberry) Pie
  : 127  Guacamole Dip
  : 198  Macinaw peaches

- In Unix/Linux, /globbing/ refers to auto-completion for example when
  searching for files beginning with ~hello~ using a wildcard: ~ls -l
  hello*~.

  #+begin_src bash :results output
    ls -l foo*
  #+end_src

  #+RESULTS:
  : -rw-r--r-- 1 marcus marcus 40960 Mar  7 15:01 foods.db
  : -rw-rw-r-- 1 marcus marcus   903 Feb 13 18:50 foods.org

- The =GLOB= operator uses wildcards like ~*~ , ~?~ , and ~_~ and matching is case
  sensitive:
  #+begin_src sqlite :db test.db :results output :header :column
    /* match all rows whose `name` begins with `Pine` */
    SELECT id, name FROM foods WHERE name GLOB 'Pine*';
  #+end_src

  #+RESULTS:
  : id   name
  : ---  ---------------------
  : 205  Pineapple
  : 258  Pineapple Italian Ice

- You can get very creative if you know, like and use regular
  expressions. SQLite does not provide native implementations but you
  can develop your own using the =sqlite_create_function()= API call
  ([[https://sqlite.org/appfunc.html][read more]]).


* TODO =GLOB= vs. =LIKE=

Summary of differences:
1. =GLOB= is case-sensitive by default, =LIKE= is not
2. =GLOB= uses ~*~ and ~?~ wildcards, =LIKE= only uses ~%~ and ~_~
3. =GLOB= matches the entire string, =LIKE= matches substrings
4. =GLOB= has no escape character, while =LIKE= uses ~\~ to escape special
   characters

Examples:
1. Case sensitivity

   - This query will not match a name that starts with "A" or "a"
     because GLOB is case-sensitive.
     #+begin_src sqlite :db test.db :results output :exports both :comments both :tangle yes :noweb yes
       SELECT name FROM foods WHERE name GLOB 'a*';
     #+end_src

   - This query will match any name that starts with 'A' OR 'a':
     #+begin_src sqlite :db test.db :results output :exports both :comments both :tangle yes :noweb yes
       SELECT name FROM foods WHERE name LIKE 'a%';
     #+end_src

2. Different wildcard characters

   - This query will match any name that starts with 'c', followed by
     exactly three characters, and ends with 'y', using * and ?:
     #+begin_src sqlite :db test.db :results output :exports both :comments both :tangle yes :noweb yes
       SELECT name FROM foods
       WHERE name GLOB 'C???e*';
     #+end_src

     - This query will match names that start with 'c', followed by any
       single character, and ends with 'y', using % and _:
       #+begin_src sqlite :db test.db :results output :exports both :comments both :tangle yes :noweb yes
         SELECT name FROM foods
         WHERE name LIKE 'c_e%';
       #+end_src

3. Matching entire strings vs. substrings

   - This query will only match names that are exactly 'apple' because
     =GLOB= matches entire strings but not substrings:
     #+begin_src sqlite :db test.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
       SELECT name FROM foods WHERE name GLOB 'apple';
     #+end_src

   - This query will match all names that contain the string 'apple'
     because =LIKE= matches substrings not only entire strings:
     #+begin_src sqlite :db test.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
       SELECT name FROM foods WHERE name LIKE '%apple%';
     #+end_src

4. Escaping special characters

   - Create a sample table ~test~:
     #+begin_src bash :results silent
       rm -vf test1.db
     #+end_src
     #+begin_src sqlite :db test1.db :column :results output :exports both :comments both :tangle yes :noweb yes
       CREATE table IF NOT EXISTS test1 (string TEXT UNIQUE);
       INSERT INTO test1 (string) VALUES ('Hello world%');
       INSERT INTO test1 (string) VALUES ('Hello_world');
       SELECT string AS WORD FROM test1;
     #+end_src

     #+RESULTS:
     : Hello world%
     : Hello_world

   - =GLOB=: The =GLOB= operator does not have an escape character. If you
     need to match literal percent or underscore characters, they are
     treated as ordinary characters.
     #+begin_src sqlite :db test1.db :column :results output :exports both :comments both :tangle yes :noweb yes
       SELECT string FROM test1 WHERE string GLOB 'Hello world%';
       SELECT string FROM test1 WHERE string GLOB 'Hello_world';
     #+end_src

     #+RESULTS:
     : Hello world%
     : Hello_world

   - =LIKE=: In the =LIKE= operator, you can escape special characters
     like ~%~ and ~_~ using the ESCAPE keyword followed by the escape
     character. By default, the escape character is ~\~. For example,
     ~LIKE '%\%' ESCAPE '\'~ would match strings ending with a percent
     sign.

   - In the following query, SQLite sees 'Hello_world%' literally, but
     it does not recognize 'Hello_world' because the '%' character is
     escaped and not seen as a wildcard, and the '_' character is
     interpreted as any single non-empty character:
     #+begin_src sqlite :db test1.db :column :results output :exports both :comments both :tangle yes :noweb yes
       SELECT string FROM test1
       WHERE string LIKE 'Hello_world\%' ESCAPE '\';
     #+end_src

     #+RESULTS:
     : Hello world%

   - In the next query, SQLite sees only 'Hello_world', because now
     the '_' character is escaped and can be seen literally, while
     'Hello world%' is not recognized:
     #+begin_src sqlite :db test1.db :column :results output :exports both :comments both :tangle yes :noweb yes
       SELECT string FROM test1
       WHERE string LIKE 'Hello\_world%' ESCAPE '\';
     #+end_src

     #+RESULTS:
     : Hello_world

   - Test1 question: what would ~LIKE 'Hello\_world\%'~ return (if you
     escape both wildcard characters?
     #+begin_src sqlite :db test1.db :column :results output :exports both :comments both :tangle yes :noweb yes
       SELECT string FROM test1 WHERE string LIKE 'Hello\_world\%' ESCAPE '\';
     #+end_src

     #+RESULTS:


* Limiting and ordering

- You can limit size and range of the result with =LIMIT= and =OFFSET=:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT * FROM food_types ORDER BY id LIMIT 1 OFFSET 1;
  #+end_src

  #+RESULTS:
  : id  name
  : --  ------
  : 2   Cereal

- The =OFFSET= clause skips one row (~Bakery~), and the =LIMIT= clause
  returns a maximum of one row (~Cereal~). They come last in the
  pipeline.

- The =ORDER BY= clause sorts the result by a column or columns before
  it is returned.

- This is essential because the rows returned from =SELECT= are never
  guaranteed to be in a specific order (this is part of the SQL
  standard).

- In other words: you need =ORDER BY= if you need to count on the result
  being in any specific order.

- The =ORDER BY= clause is similar to =SELECT=: it takes an ordered,
  comma-separated list of columnsq. After each column name, you can
  specify if you want ascending (=ASC= default) or descending (=DESC=)
  order.

- Example: extract all rows whose ~food~ names start with a ~B~, and then
  order them in descending food ~type_id~ order. Return only 10 results.
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT * FROM foods WHERE name LIKE 'B%'
    ORDER BY type_id DESC, name LIMIT 10;
  #+end_src

  #+RESULTS:
  #+begin_example
  id   type_id  name
  ---  -------  -------------------------
  382  15       Baked Beans
  383  15       Baked Potato w/Sour Cream
  384  15       Big Salad
  385  15       Brocolli
  362  14       Bouillabaisse
  328  12       BLT
  327  12       Bacon Club (no turkey)
  326  12       Bologna
  329  12       Brisket Sandwich
  274  10       Bacon
  #+end_example

- You can see that the ~type_id~ column is order in descending
  order. Within each group of identical food types, the food ~name~ is
  ordered in ascending order (by default).

- Challenge: show the ~foods~ that start with C and order them in
  ascending order by type, but in descending order by name.
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT * FROM foods WHERE NAME LIKE 'C%'
    ORDER BY type_id, name DESC LIMIT 10 OFFSET 25;
  #+end_src

  #+RESULTS:
  #+begin_example
  id   type_id  name
  ---  -------  ------------------------------
  76   3        Chicken (Kenny Rogers)
  65   3        Chicken
  64   3        Casserole
  143  7        Cream Soda
  144  7        Cranberry juice with two limes
  142  7        Colt 45
  141  7        Coffe
  140  7        Cocoa
  139  7        Coca Cola
  138  7        Club Soda
  #+end_example

- If you use both =LIMIT= and =OFFSET= together, you can use a comma
  notation in place of the =OFFSET= keyword:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT * FROM foods WHERE NAME LIKE 'B%'
    ORDER BY type_id DESC, name LIMIT 2,5; /* display 2nd row of result only */
  #+end_src

  #+RESULTS:
  : id   type_id  name
  : ---  -------  ----------------------
  : 384  15       Big Salad
  : 385  15       Brocolli
  : 362  14       Bouillabaisse
  : 328  12       BLT
  : 327  12       Bacon Club (no turkey)

* Functions

- SQL comes with various built-in functions and aggregates that can be
  used in clauses.

- Function types include: mathematical like =ABS()=, and
  string-formatting like =UPPER()= and =LOWER()=, which convert text to
  upper- and lowercase, respectively.

- Example: Guess what the output of this command is before running it
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT UPPER('hello there'), LENGTH('hello there'), ABS(-12);
  #+end_src

  #+RESULTS:
  : UPPER('hello there')  LENGTH('hello there')  ABS(-12)
  : --------------------  ---------------------  --------
  : HELLO THERE           11                     12

- Built-in functions are case-insensitive: =abs= is the same as =ABS= or =Abs=.

- Functions can accept column values as their arguments:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT id, UPPER(name), LENGTH(name) FROM foods
    WHERE type_id=1 LIMIT 10;  /* foods with type_id = 1 (Bakery) */
  #+end_src

  #+RESULTS:
  #+begin_example
  id  UPPER(name)              LENGTH(name)
  --  -----------------------  ------------
  1   BAGELS                   6
  2   BAGELS, RAISIN           14
  3   BAVARIAN CREAM PIE       18
  4   BEAR CLAWS               10
  5   BLACK AND WHITE COOKIES  23
  6   BREAD (WITH NUTS)        17
  7   BUTTERFINGERS            13
  8   CARROT CAKE              11
  9   CHIPS AHOY COOKIES       18
  10  CHOCOLATE BOBKA          15
  #+end_example

- Since functions can be part of any expression, they can also be part
  of a =WHERE= clause:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT id, UPPER(name), LENGTH(name) FROM foods
    WHERE LENGTH(name) < 5 LIMIT 5;  /* foods with names of fewer than 5 characters */
  #+end_src

  #+RESULTS:
  : id  UPPER(name)  LENGTH(name)
  : --  -----------  ------------
  : 36  PIE          3
  : 48  BRAN         4
  : 56  KIX          3
  : 57  LIFE         4
  : 80  DUCK         4

* Aggregates

- Aggregates are functions that calculate a composite (or aggregate)
  value over a group of rows (or relation) - statistical functions are
  useful aggregates: =AVG=, =SUM=, =MIN=, =MAX= etc.

- Within the pipeline, aggregates follow the =WHERE= clause: they
  compute their values on the rows filtered by =WHERE=. =SELECT= filters
  first, and then aggregates values.

- The SQLite C API allows you to create fast custom functions and
  aggregates using C.

- Reasons to perform calculations in SQL rather than in R or Python:
  1. *Efficiency:* SQL databases are optimized for operations on large
     datasets. By using the =AVG()= function directly in SQL, the
     calculation is done on the database server, which can handle the
     computation more efficiently than fetching all the data into an
     external program and then computing the mean. This is especially
     important with very large datasets.

  2. *Network Overhead:* Calculating the mean directly in the database
     reduces the amount of data that needs to be transferred over the
     network. If you were to calculate the mean in R or Python, you
     would first need to transfer all the relevant data from the
     database to the application, which can be slow and
     resource-intensive for large datasets.

  3. *Simplicity:* Writing a query to calculate the average in SQL is
     straightforward and keeps the data manipulation logic within the
     database, which can make the code easier to manage and
     understand. It avoids the complexity of fetching the data and
     then using a separate tool for the calculation.

  4. *Scalability:* Databases are designed to handle queries on large
     datasets efficiently, and they often include optimizations for
     aggregation functions like =AVG()=. These optimizations can include
     parallel processing and indexing strategies that are not as
     easily implemented in client-side languages.

  5. *Real-time data processing*: When working with real-time data, it
     might be necessary to get the average value updated dynamically
     as the data changes. Performing this operation directly in SQL
     ensures that the most current data is used for the calculation
     without the need for repeated data transfers.

  6. *Consistency*: When multiple analyses are being performed on the
     same data, performing calculations directly in the database
     ensures that all calculations are based on the same data state,
     which helps in maintaining consistency across different reports
     or analyses.

- Example: How many ~foods~ are ~Bakery~ (~type_id=1~) goods?
  (~type_id=1~):
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT COUNT(*) AS "Baked goods" FROM foods WHERE type_id=1;
  #+end_src

  #+RESULTS:
  : Baked goods
  : -----------
  : 47

- When you see an aggregate, you should think "For each row in the
  table, do something" (like sum, find the minimum, the average etc.)

- Aggregates can aggregate any expression including functions.

- Example: what is the average =LENGTH= of all names in ~foods~?
  1. Work on the ~foods~ table
  2. =SELECT= the ~name~ column
  3. Compute the =LENGTH= of that column
  4. Compute the =AVG= of the length
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT AVG(LENGTH(name)) AS "Average length of food names" FROM foods;
  #+end_src

  #+RESULTS:
  : Average length of food names
  : ----------------------------
  : 12.5849514563107

- You might not care for the decimal places:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT ROUND(AVG(LENGTH(name))) AS "Average length of food names" FROM foods;
  #+end_src

  #+RESULTS:
  : Average length of food names
  : ----------------------------
  : 13.0

* Grouping

- You can compute aggregates over an entire query result (subset of
  rows). You can also split that result into groups of rows with like
  values and compute aggregates on each group - all in one step.

- Example: group the types of food by type.
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT type_id FROM foods GROUP BY type_id;
  #+end_src

- =GROUP BY= takes the output from =WHERE= and splits it into groups of
  rows that share a common value (or values) for a specific column (or
  columns) - [[https://github.com/birkenkrahe/db24/blob/main/img/group_by.png][see image at GitHub]]:
  #+attr_html: :width 600px:
  #+CAPTION: Source: Allen/Owens (Apress, 2010)
  [[../img/group_by.png]]

  In the example, =GROUP BY= organizes all rows in ~foods~ in 15
  (~DISTINCT type_ID~) groups varying by ~type_id~.

  #+begin_src sqlite :db test.db :results output :header :column
    SELECT type_id AS "Food group"
    FROM foods GROUP BY type_id;
  #+end_src

  #+RESULTS:
  #+begin_example
  Food group
  ----------
  1
  2
  3
  4
  5
  6
  7
  8
  9
  10
  11
  12
  13
  14
  15
  #+end_example

- When =GROUP BY= is used, =SELECT= applies aggregates to each group
  separately rather than the entire filtered result as a whole.

- Example: count the number of records per group, for each type:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT type_id AS "Food group",
    COUNT(*) AS "Foods by group"
    FROM foods GROUP BY type_id;
  #+end_src

  #+RESULTS:
  #+begin_example
  Food group  Foods by group
  ----------  --------------
  1           47
  2           15
  3           23
  4           22
  5           17
  6           4
  7           60
  8           23
  9           61
  10          36
  11          16
  12          23
  13          14
  14          19
  15          32
  #+end_example

- Here, =COUNT= is applied 15 times, once for each group:
  #+attr_html: :width 600px:
  [[../img/group_count.png]]

- The number of ~Bakery~ foods is 47, the number of ~Cereal~ foods is 15,
  etc. To get the same information, you could also run individual queries:
  #+begin_src sqlite :db test.db :results output :header :column
    SELECT COUNT(*) AS "Bakery" FROM foods WHERE type_id=1;
    SELECT COUNT(*) AS "Cereal" FROM foods WHERE type_id=2;
    SELECT COUNT(*) AS "Chicken/Fowl" FROM foods WHERE type_id=3;
    .header OFF
    SELECT "               (..food groups 4 to 14...) ";
    .header ON
    SELECT COUNT(*) AS "Vegetables" FROM foods WHERE type_id=15;
  #+end_src

  #+RESULTS:
  #+begin_example
  Bakery
  ------
  47
  Cereal
  ------
  15
  Chicken/Fowl
  ------------
  23
                 (..food groups 4 to 14...)
  Vegetables
  ----------
  32
  #+end_example


* =HAVING= patterns

- You can group all records/rows by the values of the ~type_id~ column
  with =GROUP BY=.

- This query prints all food groups in descending order of the number
  of foods in each group:
  #+begin_src sqlite :db test.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
    SELECT name as FOOD, COUNT(*) AS COUNT FROM foods
    GROUP BY type_id ORDER BY COUNT DESC;
  #+end_src

  #+RESULTS:
  #+begin_example
  FOOD                 COUNT
  -------------------  -----
  Almond Joy           61
  Apple Cider          60
  Bagels               47
  Arby's Roast Beef    36
  Artichokes           32
  Atomic Sub           23
  Apple                23
  Broiled Chicken      23
  A1 Sauce             22
  Bouillabaisse        19
  Banana Yogurt        17
  Calzone (Paisano's)  16
  Bran                 15
  Clams Casino         14
  Generic (as a meal)  4
  #+end_example

- The =HAVING= clause filters the groups from =GROUP BY= in the same way
  that the =WHERE= clause filters the rows from the =FROM= clause.

- The only difference is that =WHERE='s predicate is expressed in terms
  of individual row values, while =HAVING='s predicate is expressed in
  terms of aggregate values.

- This query filters those food groups that have fewer than 20 foods
  in them, and then orders the result in ascending order by count:
  #+begin_src sqlite :db test.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
    SELECT type_id AS 'Type', name AS 'Name', COUNT(*) AS 'Count'
    FROM foods
    WHERE id
    GROUP BY type_id HAVING COUNT(*) < 20
    ORDER BY Type; -- or you can order by `Count` or `Name`
  #+end_src

  #+RESULTS:
  : Type  Name                 Count
  : ----  -------------------  -----
  : 2     Bran                 15
  : 5     Banana Yogurt        17
  : 6     Generic (as a meal)  4
  : 11    Calzone (Paisano's)  16
  : 13    Clams Casino         14
  : 14    Bouillabaisse        19

- The figure shows what's going on:
  1) =WHERE= (not used) filters rows
  2) =GROUP BY= aggregates rows by ~type_id~
  3) =HAVING= filters the ~type_id~ aggregates by condition ~COUNT<20~
  4) =COUNT= counts the items in each filtered ~type_id~ aggregate
  5) =ORDER BY= (not shown) sorts the result by column value.
  #+attr_html: :width 600px:
  [[../img/having_count.png]]

- Caveat! Some databases will allow you to construct nonsensical
  queries where non-aggregated columns are grouped in a =SELECT=
  statement with mixed aggregate and non-aggregate columns.

- Example: this is an allowed query
  #+begin_src sqlite :db test.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
    SELECT type_id AS TYPE, COUNT(*) FROM foods;
  #+end_src

  #+RESULTS:
  : TYPE  COUNT(*)
  : ----  --------
  : 1     412

- As you can see from the result, the aggregate function =COUNT=
  collapses the input table to a number, but we have not told SQLite
  how to group ~type_id~ - the value 412 does not have anything to do
  with the ~type_id~ value 1.

- Lesson: do not rely on any statement that fails to group by
  non-aggregate fields!

* Removing duplicates with =DISTINCT=

- In the previous example, it would make sense to filter out duplicate
  rows with =DISTINCT= to arrive at a unique set of types:
  #+begin_src sqlite :db test.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
    SELECT DISTINCT type_id FROM foods;
  #+end_src

  #+RESULTS:
  #+begin_example
  type_id
  -------
  1
  2
  3
  4
  5
  6
  7
  8
  9
  10
  11
  12
  13
  14
  15
  #+end_example

- How does this align with the pipeline (see figure)
  1) =WHERE= returns the entire foods table (412 records)
  2) =SELECT= clause pulls out only the ~type_id~ column
  3) =DISTINCT= removes duplicate rows resulting in 15 unique ones.
     #+attr_html: :width 600px:
     [[../img/select_phases.png]]

- Now we can also count the number of types:
  #+begin_src sqlite :db test.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
    SELECT COUNT(DISTINCT type_id) AS "Number of food types" FROM foods;
  #+end_src

  #+RESULTS:
  : Number of food types
  : --------------------
  : 15

* Summary

- =SELECT= command is a fundamental SQL command for data retrieval,
  allowing column projection and row restriction.
- The =WHERE= clause filters rows based on conditions, using logical
  predicates.
- Data can be represented as literals, variables, expressions, or
  function results.
- Operators can be unary, binary, or ternary, affecting how values are
  processed in SQL queries.
- The =LIKE= and =GLOB= operators are used for pattern matching, with
  differences in case sensitivity and wildcard characters.
- =LIMIT= and =OFFSET= clauses control the size and range of query
  results.
- SQL functions and aggregates perform operations on data, offering
  built-in methods for data manipulation and calculation.
- =GROUP BY= and =HAVING= clauses enable grouping and filtering of
  aggregated data.
- The =DISTINCT= keyword removes duplicate rows from results.

Table joins and subqueries are bigger topic and we'll postpone their
discussion until after we talked about database design some more.

* Footnotes
[fn:2] The negation of a disjunction is the conjunction of the
negations, and the negation of a conjunction is the disjunction of the
negations.

[fn:1] In SQLite, the set parameter ~SQLITE_MAX_EXPR_DEPTH~ is 1000, not
9, and it's not just for nested SELECT queries but for the whole
expression tree ([[https://sqlite.org/limits.html][source]]). For other flavors, the values are all over
the place: SQL Server = 32 nested subqueries, Oracle = 255, and
another source said "There is no limit to the number of subqueries you
can use in an SQL query." MySQL and PostgreSQL have a ~thread_stack~
parameter that can be set freely. Either way, these set values can be
changed at runtime.
