#+TITLE:Proving De Morgan's Laws in SQLite 
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Bonus assignment - CSC 330 Database Theory and Applications - Lyon College, Spring 2024
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes#+PROPERTY: header-args:python :session *Python* :results output :exports both :noweb yes#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output :exports both :noweb yes#+PROPERTY: header-args:C++ :main yes :includes <iostream> :results output :exports both :noweb yes
#+startup: overview hideblocks indent entitiespretty: 
* Bonus assignment: prove De Morgan's laws in SQLite

** Background

De Morgan's laws state that (1) the negation of a disjunction is the
conjunction of the negations, and (2) the negation of a conjunction is
the disjunction of the negations, or in mathematical symbolic language
for Boolean variables P and Q: see [[https://github.com/birkenkrahe/py109/blob/main/img/py_de_morgan.png][figure]] (mathematical notation).

** Problem

Write SQL code that shows the equivalence of both versions of De
Morgan's laws for all values of the Boolean variables P, Q \in {0,1}.

Tip: my sample solution has four lines, each of them starting with a
=SELECT= statement. The output looks like this:
#+begin_example
   P  Q  NOT(P OR Q)  (NOT P) AND (NOT Q)  NOT(P AND Q)  (NOT P) OR (NOT Q)
   -  -  -----------  -------------------  ------------  ------------------
   0  0  1            1                    1             1
   0  1  0            0                    1             1
   1  0  0            0                    1             1
   1  1  0            0                    0             0
#+end_example


** Submission

Put your solution into an Org-mode file complete with an explanation
of how you solved the problem, code blocks, and output. You will get
my sample solution when you submit your working solution.

** Solution

- This solution uses the idea of a truth table: I'm creating a table
  that shows the values for P and Q and computes the values for the
  left and right sides of the first and the second De Morgan Law:

  | P | Q | \not (P \lor Q) | (\not P) \land (\not Q) | \not (P \land Q) | (\not P) \lor (\not Q) |
  |---+---+-----------+---------------+-----------+---------------|
  | 0 | 0 |         1 |             1 |         1 |             1 |
  | 0 | 1 |         0 |             0 |         1 |             1 |
  | 1 | 0 |         0 |             0 |         1 |             1 |
  | 1 | 1 |         0 |             0 |         0 |             0 |

- Code the operations manually:
  1) The first two columns specify the P an Q values.
  2) The third and fourth columns are the computed left and right side
     of the first De Morgan law.
  3) The fifth and sixth columns are the computed left and right side
     of the second De Morgan law.
  4) The proof is valid if 3rd and 4th, and 5th and 6th columns are
     identical.
  5) The first =SELECT= statement prints the header, which is then
     switched =OFF=.
  #+begin_src sqlite :db test.db :results output :header :column
    /* P = 0 Q = 0 */
    SELECT
    0 AS "P",
    0 AS "Q",
    NOT(0 OR 0) AS "NOT(P OR Q)",
    (NOT 0) AND (NOT 0) AS "(NOT P) AND (NOT Q)",
    NOT(0 AND 0) AS "NOT(P AND Q)",
    (NOT 0) OR (NOT 0) AS "(NOT P) OR (NOT Q)";

    /* P = 0 Q = 1  and header off*/
    .header OFF
    SELECT
    0 AS "P",
    1 AS "Q",
    NOT(0 OR 1) AS "NOT(P OR Q)",
    (NOT 0) AND (NOT 1) AS "(NOT P) AND (NOT Q)",
    NOT(0 AND 1) AS "NOT(P AND Q)",
    (NOT 0) OR (NOT 1) AS "(NOT P) OR (NOT Q)";

    /* P = 1 Q = 0  and header off*/
    SELECT
    1 AS "P",
    0 AS "Q",
    NOT(1 OR 0) AS "NOT(P OR Q)",
    (NOT 1) AND (NOT 0) AS "(NOT P) AND (NOT Q)",
    NOT(0 AND 1) AS "NOT(P AND Q)",
    (NOT 1) OR (NOT 0) AS "(NOT P) OR (NOT Q)";

    /* P = 1 Q = 1  and header off*/
    SELECT
    1 AS "P",
    1 AS "Q",
    NOT(1 OR 1) AS "NOT(P OR Q)",
    (NOT 1) AND (NOT 1) AS "(NOT P) AND (NOT Q)",
    NOT(1 AND 1) AS "NOT(P AND Q)",
    (NOT 1) OR (NOT 1) AS "(NOT P) OR (NOT Q)";
  #+end_src

  #+RESULTS:
  : P  Q  NOT(P OR Q)  (NOT P) AND (NOT Q)  NOT(P AND Q)  (NOT P) OR (NOT Q)
  : -  -  -----------  -------------------  ------------  ------------------
  : 0  0  1            1                    1             1
  : 0  1  0            0                    1             1
  : 1  0  0            0                    1             1
  : 1  1  0            0                    0             0

