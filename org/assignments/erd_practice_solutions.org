#+options: toc:nil ^:nil num:nil
#+startup: overview hideblocks
* Create ERD and SQLite file

  1) [ ] In editor.ponyorm.com create two entities: ~Lecturer~ and ~Course~

  2) [ ] Add attributes ~Lecturer.name~ and ~Course.title~

     #+caption: Entities Lecturer and Course
     [[./img/erd1.png]]

  3) [ ] Add a relationship between the entities:
     - A lecturer may be related to *many* courses
     - Each course may be related to *exactly one* lecturer

  4) You see that the ORM creates *foreign keys* in each entity:
     ~Lecturer.courses~ and ~Courses.lecturer~.

     #+caption: Foreign key attributes courses and lecturer
     [[./img/erd2.png]]

  5) [ ] You can open a third column with the menu button at the top of
     each table to see key properties:

     #+attr_html: :width 500px
     #+caption: Foreign key attributes courses and lecturer
     [[./img/erd3.png]]

  6) [ ] Copy the SQLite code from Ponyorm and save it in a file
     ~students.sql~

* Create database

  1) [ ] Take the SQLite code from Ponyorm and create an SQLite
     database ~students.db~

     #+begin_src bash :results silent
   #    sqlite3 students.db < students.sql
     #+end_src

  2) [ ] Check for tables.

     #+begin_src sqlite :db students.db :results output :exports both
       .tables
     #+end_src

     #+RESULTS:
     : Course    Lecturer

  3) [ ] Check with ~.schema~ what the required data types are, or look
     at [[https://editor.ponyorm.com/user/birkenkrahe/Team/designer][the Ponyorm ERD]].

     #+name: schema
     #+begin_src sqlite :db students.db :results output :exports both
       .schema
     #+end_src

     #+RESULTS: schema
     #+begin_example
     CREATE TABLE IF NOT EXISTS "Lecturer" (
       "id" INTEGER PRIMARY KEY AUTOINCREMENT,
       "name" TEXT NOT NULL
     );
     CREATE TABLE sqlite_sequence(name,seq);
     CREATE TABLE IF NOT EXISTS "Course" (
       "id" INTEGER PRIMARY KEY AUTOINCREMENT,
       "title" TEXT NOT NULL,
       "lecturer" INTEGER NOT NULL REFERENCES "Lecturer" ("id") ON DELETE CASCADE
     );
     CREATE INDEX "idx_course__lecturer" ON "Course" ("lecturer");
     #+end_example

     - When the table is deleted, ~CASCADE~ means that if the record in
       the parent table (~Lecturer~) is deleted, the record in the child
       table (~Course~) will also automatically be deleted - e.g. if a
       lecturer is removed - then his/her course links are also
       removed ([[https://www.techonthenet.com/sqlite/foreign_keys/foreign_delete.php][doc]])

  4) It is instructive to look at the different ways in which RDBMS
     implement the PK constraints. E.g. for PostgreSQL (the RDBMS used
     in DataCamp), it looks like this:

     #+begin_example sql
     ALTER TABLE "course"
     ADD CONSTRAINT "fk_course__lecturer"
     FOREIGN KEY ("lecturer") REFERENCES "lecturer" ("id")
     ON DELETE CASCADE
     #+end_example

     - The FK ~course.lecturer~ is mapped onto ~lecturer.id~ as in SQLite
     - SQLite keeps tracks of relationships with a separate index table

* ~INSERT~ data into the ~Lecturer~ table

  1) [ ] Note that you cannot keep running these ~INSERT~ commands. After
     the first time a PK is used, it is protected as ~unique~.

     #+name: insert
     #+begin_src sqlite :db students.db :header :column :results silent :exports both
       INSERT INTO Lecturer VALUES (1, "Sonnier");
       INSERT INTO Lecturer VALUES (2, "Birkenkrahe");
       INSERT INTO Lecturer VALUES (3, "Jones");
     #+end_src

  2) [ ] Check table content.

     #+name: check
     #+begin_src sqlite :db students.db :header :column :results output :exports both
       SELECT * FROM Lecturer;
     #+end_src

     #+RESULTS: insert
     : id  name
     : --  -----------
     : 1   Sonnier
     : 2   Birkenkrahe
     : 3   Jones

  3) [ ] The table ~Course~ requires three columns, one is the
     responsible lecturer. Show the schema only for ~Course~.

     #+begin_src sqlite :db students.db :results output :exports both
       .schema Course
     #+end_src

     #+RESULTS:
     : CREATE TABLE IF NOT EXISTS "Course" (
     :   "id" INTEGER PRIMARY KEY AUTOINCREMENT,
     :   "title" TEXT NOT NULL,
     :   "lecturer" INTEGER NOT NULL REFERENCES "Lecturer" ("id") ON DELETE CASCADE
     : );
     : CREATE INDEX "idx_course__lecturer" ON "Course" ("lecturer");

  4) [ ] Insert course information.

     #+begin_src sqlite :db students.db :results silent :exports both :header :column
       INSERT INTO Course VALUES (1, "Databases", 2);
       INSERT INTO Course VALUES (2, "Modeling",  2);
       INSERT INTO Course VALUES (3, "Logic", 1);
       INSERT INTO Course VALUES (4, "Algorithms", 1);
       INSERT INTO Course VALUES (5, "Operating_Systems", 2);
       INSERT INTO Course VALUES (6, "Python", 3);
       INSERT INTO Course VALUES (7, "Data_structures", 1);
       INSERT INTO Course VALUES (8, "Data_science", 2);
     #+end_src

  5) [ ] Check content.

     #+begin_src sqlite :db students.db :results output :exports both :header :column
       SELECT * FROM Course;
     #+end_src

     #+RESULTS:
     #+begin_example
     id  title              lecturer
     --  -----------------  --------
     1   Databases          2
     2   Modeling           2
     3   Logic              1
     4   Algorithms         1
     5   Operating_Systems  2
     6   Python             3
     7   Data_structures    1
     8   Data_science       2
     #+end_example

* ~JOIN~ TABLES

  - [ ] Which courses do I teach?

    #+name: select
    #+begin_src sqlite :db students.db :results output :exports both :header :column
      SELECT Course.title AS title, Lecturer.name as name
      FROM Course JOIN Lecturer ON Course.lecturer = Lecturer.id
      WHERE name = "Birkenkrahe";
    #+end_src

    #+RESULTS: select
    : title              name
    : -----------------  -----------
    : Databases          Birkenkrahe
    : Modeling           Birkenkrahe
    : Operating_Systems  Birkenkrahe
    : Data_science       Birkenkrahe
