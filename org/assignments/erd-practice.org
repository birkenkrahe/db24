#+TITLE:ERD Practice Notebook
#+AUTHOR:ERD Practice Notebook
#+SUBTITLE:ERD Practice Notebook CSC330 Database Theory & Appl Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* Practice exercise: primary and foreign keys and ~SELECT~ on ~JOIN~

1) In editor.ponyorm.com create two entities: ~Lecturer~ and ~Course~

2) Add attributes ~Lecturer.name~ and ~Course.title~

   #+caption: Entities Lecturer and Course
   [[../../img/erd1.png]]

3) Add a relationship between the entities:
   - A lecturer may be related to *many* courses
   - Each course may be related to *exactly one* lecturer

4) You see that the ORM creates *foreign keys* in each entity:
   ~Lecturer.courses~ and ~Courses.lecturer~.

   #+caption: Foreign key attributes courses and lecturer
   [[../../img/erd2.png]]

5) You can open a third column with the menu button at the top of
   each table to see key properties:

   #+attr_html: :width 500px
   #+caption: Foreign key attributes courses and lecturer
   [[../../img/erd3.png]]

6) Copy the SQLite code from Ponyorm and save it (C-x C-f) in a file
   ~students.sql~ (use site "Copy All" and not browser "Save As")

7) Create an SQLite database ~student.db~ in a terminal:
   #+begin_src bash
     sqlite3 student.db < students.sql
     ls -l student.db
   #+end_src

   Check success on the SQLite console:
   #+begin_src sqlite :db student.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
     .tables
   #+end_src

   Or read SQL into the ~test.db~ database from the SQLite console:
   #+begin_src sqlite :db test.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
     .read students.sql
     .tables
     .schema
   #+end_src

   - When the table is deleted, ~CASCADE~ means that if the record in
     the parent table (~Lecturer~) is deleted, the record in the child
     table (~Course~) will also automatically be deleted - e.g. if a
     lecturer is removed - then his/her course links are also
     removed ([[https://www.techonthenet.com/sqlite/foreign_keys/foreign_delete.php][doc]])

   - It is instructive to look at the different ways in which RDBMS
     implement the PK constraints. E.g. for PostgreSQL (the RDBMS
     used in DataCamp), it looks like this:
     #+begin_example sql
     ALTER TABLE "course"
     ADD CONSTRAINT "fk_course__lecturer"
     FOREIGN KEY ("lecturer") REFERENCES "lecturer" ("id")
     ON DELETE CASCADE
     #+end_example
     + The FK ~course.lecturer~ is mapped onto ~lecturer.id~ as in SQLite
     + SQLite keeps tracks of relationships with a separate index table

8) For your database, generate sample tables which look like this:

   Table ~Lecturer~: Sample command ~SELECT * FROM Lecturer;~

   #+begin_example
    : id  name
    : --  -----------
    : 1   Sonnier
    : 2   Birkenkrahe
    : 3   Staff
   #+end_example

   =INSERT= records:
   #+begin_src sqlite :db student.db :results silent
      INSERT INTO Lecturer VALUES (1, "Sonnier");
      INSERT INTO Lecturer VALUES (2, "Birkenkrahe");
      INSERT INTO Lecturer VALUES (3, "Staff");
   #+end_src

   Query with =SELECT=:
   #+begin_src sqlite :db student.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
     SELECT * FROM Lecturer;		     
   #+end_src

   Table ~Course~: Sample command ~SELECT * FROM Course;~

   #+begin_example
   id  title              lecturer
   --  -----------------  --------
   1   Databases          2
   2   Modeling           2
   3   Logic              1
   4   Algorithms         1
   5   Operating_Systems  2
   6   Python             3
   7   Data_structures    1
   8   Data_science       2
   #+end_example

   =INSERT= records:
   #+begin_src sqlite :db student.db :results silent
      INSERT INTO Course VALUES (1, "Databases", 2);
      INSERT INTO Course VALUES (2, "Modeling",  2);
      INSERT INTO Course VALUES (3, "Logic", 1);
      INSERT INTO Course VALUES (4, "Algorithms", 1);
      INSERT INTO Course VALUES (5, "Operating_Systems", 2);
      INSERT INTO Course VALUES (6, "Python", 3);
      INSERT INTO Course VALUES (7, "Data_structures", 1);
      INSERT INTO Course VALUES (8, "Data_science", 2);
   #+end_src

   Query with =SELECT=:
   #+begin_src sqlite :db student.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
     SELECT * FROM Course;  
   #+end_src

   #+RESULTS:
   #+begin_example
   id  title              lecturer
   --  -----------------  --------
   1   Databases          2       
   2   Modeling           2       
   3   Logic              1       
   4   Algorithms         1       
   5   Operating_Systems  2       
   6   Python             3       
   7   Data_structures    1       
   8   Data_science       2       
   #+end_example

9) Which courses do I teach?

   Start with the schema:
   #+begin_src sqlite :db student.db :header :column :results output :exports both :comments both :tangle yes :noweb yes
     .schema
   #+end_src

   Query with =SELECT,= and =JOIN= ~Course~ and ~Lecturer~ on corresponding
   keys:
   #+begin_src sqlite :db student.db :results output :header :column
     SELECT Course.title AS Title, Lecturer.name AS Name
       FROM Course JOIN Lecturer ON Course.lecturer = Lecturer.id
       WHERE name = "Birkenkrahe"
   #+end_src
